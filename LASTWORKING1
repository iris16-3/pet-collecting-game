<!doctype html>
<html lang="en"><head><meta charset="utf-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/><title>Pet Collector â€” Create & Play (eggs-as-items)</title>
<style>:root{--bg:#fff;--muted:#666;--accent:#0b67ff}*{box-sizing:border-box}html,body{height:100%;margin:0}body{font-family:Inter,system-ui,Segoe UI,Roboto,sans-serif;background:var(--bg);padding:18px;color:#111;overflow-x:hidden}header{display:flex;gap:8px;align-items:center;margin-bottom:14px}h1{font-size:18px;margin:0}.btn{padding:6px 10px;border-radius:8px;border:1px solid #ccc;background:#f5f5f5;cursor:pointer}.btn.primary{background:var(--accent);color:#fff;border:0}main{max-width:1200px;margin:0 auto}.container{display:grid;grid-template-columns:360px 1fr;gap:16px}.card{border:1px solid #ddd;border-radius:8px;padding:12px;background:#fff}label{display:block;font-size:13px;margin:6px 0;color:var(--muted)}.small{font-size:12px;color:var(--muted)}.muted{color:var(--muted)}.row{display:flex;gap:6px;align-items:center}.inv-item,.egg-item,.pet-item,.acct-item{border:1px dashed #ccc;padding:6px;border-radius:6px;margin:4px 0;background:#fbfbff}.inv-card{border:1px solid #e6e6e6;border-radius:8px;padding:10px;background:#fff;display:flex;flex-direction:row;align-items:center;justify-content:space-between;gap:12px;margin-bottom:8px}.inv-card strong{font-weight:400}/* make item names not bold */.inv-card .meta{font-size:12px;color:var(--muted)}.trade-area{display:flex;gap:12px;align-items:flex-start}.offer-list{flex:1;border:1px solid #eee;border-radius:8px;padding:8px;min-height:160px;background:#fff;max-height:420px;overflow:auto}.offer-item{border-bottom:1px solid #f1f1f1;padding:6px 4px;display:flex;justify-content:space-between;align-items:center;cursor:pointer}.offer-item:last-child{border-bottom:0}.trade-actions{margin-top:8px;display:flex;gap:8px}.trade-total{font-weight:700;padding:6px 8px;border-radius:8px;background:#f1f7ff;border:1px solid #ddd}.json-textarea{width:100%;height:220px;border:1px solid #ddd;padding:8px;border-radius:6px}.group-header{font-weight:700;margin-top:8px;margin-bottom:6px}.group-list{display:flex;flex-direction:column;gap:6px}.disabled-item{opacity:0.5;cursor:not-allowed}.scroll-list{max-height:420px;overflow:auto;padding-right:6px}.subtitle-centered{text-align:center;font-weight:700;margin:10px 0;color:var(--muted)}.group-subtitle{text-align:left;font-weight:700;margin:10px 0;color:var(--muted)}@media (max-width:900px){.container{grid-template-columns:1fr}header .row{flex-wrap:wrap}}</style>
</head><body>
<header><h1>Pet Collector</h1><div class="row" style="margin-left:auto"><button id="bCreate" class="btn">Create</button><button id="bPlay" class="btn">Play</button><button id="bList" class="btn">List</button><button id="bTrade" class="btn">Trade</button><button id="bExport" class="btn">Export</button><button id="bImport" class="btn">Import</button></div></header>
<main class="container"><section class="card" id="L"></section><section class="card" id="R"></section></main>
<div id="modal"><div><h3 id="modalTitle"></h3><div id="modalBody"></div><div class="row" style="justify-content:end;margin-top:8px"><button id="modalClose" class="btn">Cancel</button></div></div></div>
<script>
// storage keys
const S_EGGS='petgame_eggs',S_ACCTS='petgame_accounts';
const L=document.getElementById('L'),R=document.getElementById('R');
const bCreate=document.getElementById('bCreate'),bPlay=document.getElementById('bPlay'),bTrade=document.getElementById('bTrade'),bList=document.getElementById('bList');
const bExport=document.getElementById('bExport'),bImport=document.getElementById('bImport');
const M=document.getElementById('modal'),MT=document.getElementById('modalTitle'),MB=document.getElementById('modalBody'),MClose=document.getElementById('modalClose');
const load=k=>{try{return JSON.parse(localStorage.getItem(k)||'[]')}catch{return[]}};const save=(k,v)=>localStorage.setItem(k,JSON.stringify(v));
let eggs=load(S_EGGS),accounts=load(S_ACCTS),mode='create',selectedEggId=null,selectedAccountId=null;let trade={acc1:null,acc2:null,offers1:[],offers2:[]};let inventoryScroll={};
const uid=(p='id')=>p+'_'+Date.now().toString(36)+'_'+Math.floor(Math.random()*9000);
const esc=s=>s?String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'):'',btn=(t,c,f)=>{const b=document.createElement('button');b.className='btn '+(c||'');b.textContent=t;b.addEventListener('click',f);return b};
const openModal=(title,nodes)=>{
  MT.textContent=title;
  MB.innerHTML='';
  nodes.forEach(n=>MB.appendChild(n));
  // ensure modal overlay styles are applied inline so it always appears centered and dimmed
  M.style.display='flex';
  M.style.position='fixed';
  M.style.inset='0';
  M.style.zIndex='99999';
  M.style.alignItems='center';
  M.style.justifyContent='center';
  M.style.background='rgba(0,0,0,0.5)';
  M.style.padding='18px';
  // prevent background scroll while modal is open
  try{document.body.style.overflow='hidden'}catch(e){}
  // make modal content scrollable, centered, and with solid white background
  const inner=M.querySelector(':scope > div');
  if(inner){
    inner.style.maxHeight='85vh';
    inner.style.overflow='auto';
    inner.style.margin='0 12px';
    inner.style.boxSizing='border-box';
    inner.style.background='#fff';
    inner.style.padding='12px';
    inner.style.borderRadius='8px';
    inner.style.border='1px solid #ddd';
    inner.style.boxShadow='0 8px 30px rgba(0,0,0,0.12)';
  }
};
const closeModal=()=>{
  M.style.display='none';
  MB.innerHTML='';
  try{document.body.style.overflow=''}catch(e){}
};
MClose.addEventListener('click',closeModal);

function normalizeData(){if(!Array.isArray(eggs))eggs=[];if(!Array.isArray(accounts))accounts=[];eggs.forEach(e=>{if(e.visible===undefined)e.visible=true;if(!e.pets)e.pets=[];if(!e.currency)e.currency='c';if(e.tradeValue===undefined)e.tradeValue=Number(e.price)||0});accounts.forEach(a=>{if(a.stars===undefined)a.stars=0;if(!a.inventory)a.inventory=[];a.money=Number(a.money)||0})}
normalizeData();
const getAllBasePets=()=>{const list=[];eggs.forEach(e=>{(e.pets||[]).forEach(p=>list.push(p))});return list}
const formatPrice=e=>`${e.price}${e.currency==='s'?'s':'c'}`
function exportData(){const payload={eggs,accounts,exportedAt:Date.now()};const json=JSON.stringify(payload,null,2);const blob=new Blob([json],{type:'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download='petgame_data_'+(new Date()).toISOString().replace(/[:.]/g,'-')+'.json';document.body.appendChild(a);a.click();a.remove();URL.revokeObjectURL(url);const cont=document.createElement('div');const ta=document.createElement('textarea');ta.className='json-textarea';ta.value=json;const copyBtn=btn('Copy JSON','',()=>{ta.select();document.execCommand('copy');alert('JSON copied')});cont.appendChild(ta);cont.appendChild(document.createElement('br'));cont.appendChild(copyBtn);openModal('Exported data',[cont])}
function openImportModal(){const cont=document.createElement('div');const ta=document.createElement('textarea');ta.className='json-textarea';ta.placeholder='Paste exported JSON...';const imp=btn('Import JSON','primary',()=>{const raw=ta.value.trim();if(!raw)return alert('Paste JSON');try{const parsed=JSON.parse(raw);if(parsed.eggs&&parsed.accounts){eggs=parsed.eggs;accounts=parsed.accounts;normalizeData();save(S_EGGS,eggs);save(S_ACCTS,accounts);closeModal();render();alert('Import OK')}else{if(confirm('Missing top-level eggs/accounts. Try best-effort import?')){if(Array.isArray(parsed)){eggs=parsed;normalizeData();save(S_EGGS,eggs);closeModal();render();alert('Imported into eggs (best-effort)')}else alert('Invalid structure')}}}catch(e){alert('Invalid JSON: '+e.message)}});cont.appendChild(ta);cont.appendChild(document.createElement('br'));cont.appendChild(imp);openModal('Import data',[cont])}

function render(){bCreate.classList.toggle('primary',mode==='create');bPlay.classList.toggle('primary',mode==='play');bList.classList.toggle('primary',mode==='list');bTrade.classList.toggle('primary',mode==='trade');if(mode==='create')renderCreate();else if(mode==='play')renderPlay();else if(mode==='trade')renderTrade();else renderListMode()}

// --- Create / Play / List code unchanged (kept same as before) ---
function renderCreate(){L.innerHTML='';R.innerHTML='';L.appendChild(Object.assign(document.createElement('h3'),{textContent:'Create Mode'}));
 const lbl=document.createElement('label');lbl.textContent='Egg name';const nameIn=document.createElement('input');nameIn.placeholder='Mystic Egg';const lp=document.createElement('label');lp.textContent='Egg price (coins or stars)';const priceIn=document.createElement('input');priceIn.type='number';priceIn.value=100;const currencySelect=document.createElement('select');currencySelect.innerHTML='<option value="c">Coins</option><option value="s">Stars</option>';L.appendChild(lbl);L.appendChild(nameIn);L.appendChild(lp);L.appendChild(priceIn);L.appendChild(Object.assign(document.createElement('label'),{textContent:'Currency'}));L.appendChild(currencySelect);
 const valLbl=document.createElement('label');valLbl.textContent='Egg trade value (for inventory/trades)';const valIn=document.createElement('input');valIn.type='number';valIn.step='0.01';valIn.value=priceIn.value;L.appendChild(valLbl);L.appendChild(valIn);
 const r=document.createElement('div');r.className='row';r.style.marginTop='8px';r.appendChild(btn('Add Egg','primary',()=>{const name=nameIn.value.trim(),price=Number(priceIn.value)||0,curr=currencySelect.value,tradeValue=Number(valIn.value)||0;if(!name)return alert('Enter egg name');const e={id:uid('egg'),name,price,currency:curr,pets:[],visible:true,tradeValue};eggs.push(e);save(S_EGGS,eggs);selectedEggId=e.id;render()}));r.appendChild(btn('Export eggs JSON','',()=>{prompt('Eggs JSON',JSON.stringify(eggs,null,2))}));L.appendChild(r);
 L.appendChild(Object.assign(document.createElement('h4'),{textContent:'Your Eggs'}));const list=document.createElement('div');list.className='scroll-list';if(!eggs.length)list.innerHTML='<div class="muted">No eggs yet.</div>';else eggs.forEach(egg=>{if(egg.visible===undefined)egg.visible=true;const el=document.createElement('div');el.className='egg-item row';el.style.justifyContent='space-between';const left=document.createElement('div');left.style.flex='1';left.innerHTML=`<strong>${esc(egg.name)}</strong><div class="small">Price: ${formatPrice(egg)} â€” Pets: ${egg.pets.length} â€” Value: ${Number(egg.tradeValue||0).toFixed(2)}</div>`;const ctr=document.createElement('div');ctr.className='row';ctr.appendChild(btn('Edit','',()=>{selectedEggId=egg.id;render()}));ctr.appendChild(btn(egg.visible?'Visible':'Hidden','',()=>{egg.visible=!egg.visible;save(S_EGGS,eggs);render()}));el.appendChild(left);el.appendChild(ctr);list.appendChild(el)});L.appendChild(list);
 if(selectedEggId){const egg=eggs.find(e=>e.id===selectedEggId);if(egg)renderEggEditor(egg);else{selectedEggId=null;R.innerHTML='<div class="muted">Select an egg</div>'}}else R.innerHTML='<div class="muted">Select an egg to edit</div>'}

function renderEggEditor(egg){R.innerHTML='';R.appendChild(Object.assign(document.createElement('h3'),{textContent:'Editing: '+egg.name}));const lp=document.createElement('label');lp.textContent='Egg price';const inPrice=document.createElement('input');inPrice.type='number';inPrice.value=egg.price;R.appendChild(lp);R.appendChild(inPrice);const curSelect=document.createElement('select');curSelect.innerHTML='<option value="c">Coins</option><option value="s">Stars</option>';curSelect.value=egg.currency||'c';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Currency (c = coins, s = stars)'}));R.appendChild(curSelect);
 const valLbl=document.createElement('label');valLbl.textContent='Egg trade value (for inventory/trades)';const valIn=document.createElement('input');valIn.type='number';valIn.step='0.01';valIn.value=egg.tradeValue||0;R.appendChild(valLbl);R.appendChild(valIn);
 const vr=document.createElement('div');vr.className='row';vr.style.marginTop='6px';const vl=document.createElement('label');vl.textContent='Visible in shop';vr.appendChild(vl);vr.appendChild(btn(egg.visible?'Visible':'Hidden','',()=>{egg.visible=!egg.visible;save(S_EGGS,eggs);render()}));R.appendChild(vr);
 const rr=document.createElement('div');rr.className='row';rr.style.marginTop='8px';rr.appendChild(btn('Save Egg','primary',()=>{egg.price=Number(inPrice.value)||0;egg.currency=curSelect.value||'c';egg.tradeValue=Number(valIn.value)||0;save(S_EGGS,eggs);render()}));rr.appendChild(btn('Back to eggs','',()=>{selectedEggId=null;render()}));R.appendChild(rr);
 R.appendChild(Object.assign(document.createElement('h4'),{textContent:"Pets in this egg (order doesn't matter)"}));const petList=document.createElement('div');petList.className='scroll-list';if(!egg.pets||!egg.pets.length)petList.innerHTML='<div class="muted">No pets yet.</div>';else egg.pets.forEach(p=>{const d=document.createElement('div');d.className='pet-item';d.innerHTML=`<div style="display:flex;gap:8px;align-items:center"><div style="flex:1"><strong>${esc(p.name)}</strong> <span class="small">(${esc(p.rarityText)} â€” ${p.rarityPct}%)</span><div class="small muted">Weight: ${p.weightMin}kg - ${p.weightMax}kg â€¢ Money/tap: ${p.moneyPerTap}</div><div class="small">Values: ${Number(p.valueRegular||0)} / G:${Number(p.valueGold||0)} / R:${Number(p.valueRainbow||0)}</div><div class="small">${esc(p.description||'')}</div></div></div>`;const ctr=document.createElement('div');ctr.className='inline-controls';ctr.appendChild(btn('Edit','',()=>showPetEditModal(egg,p)));d.appendChild(ctr);petList.appendChild(d)});R.appendChild(petList);
 R.appendChild(Object.assign(document.createElement('h4'),{textContent:'Add a new Pet'}));const f={};f.name=document.createElement('input');f.name.placeholder='Pet name';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Name'}));R.appendChild(f.name);f.rtext=document.createElement('input');f.rtext.placeholder='Rarity text';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Rarity text'}));R.appendChild(f.rtext);f.rpct=document.createElement('input');f.rpct.type='number';f.rpct.placeholder='Rarity %';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Rarity percentage (0-100)'}));R.appendChild(f.rpct);f.desc=document.createElement('textarea');f.desc.placeholder='A short description';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Description'}));R.appendChild(f.desc);f.wmin=document.createElement('input');f.wmin.type='number';f.wmin.step='0.1';f.wmin.placeholder='Weight min';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Weight min (kg)'}));R.appendChild(f.wmin);f.wmax=document.createElement('input');f.wmax.type='number';f.wmax.step='0.1';f.wmax.placeholder='Weight max';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Weight max (kg)'}));R.appendChild(f.wmax);f.mpt=document.createElement('input');f.mpt.type='number';f.mpt.step='0.01';f.mpt.placeholder='Money per tap';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Money earn per tap (baseline)'}));R.appendChild(f.mpt);f.gold=document.createElement('input');f.gold.type='number';f.gold.placeholder='Gold chance %';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Gold chance (%)'}));R.appendChild(f.gold);f.rainbow=document.createElement('input');f.rainbow.type='number';f.rainbow.placeholder='Rainbow chance %';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Rainbow chance (%)'}));R.appendChild(f.rainbow);f.valReg=document.createElement('input');f.valReg.type='number';f.valReg.step='0.01';f.valReg.placeholder='Regular value';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Regular trade value'}));R.appendChild(f.valReg);f.valGold=document.createElement('input');f.valGold.type='number';f.valGold.step='0.01';f.valGold.placeholder='Gold value';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Gold trade value'}));R.appendChild(f.valGold);f.valRainbow=document.createElement('input');f.valRainbow.type='number';f.valRainbow.step='0.01';f.valRainbow.placeholder='Rainbow value';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Rainbow trade value'}));R.appendChild(f.valRainbow);
 R.appendChild(btn('Add Pet','primary',()=>{const name=f.name.value.trim();const rtext=f.rtext.value.trim()||'Common';const rpct=Number(f.rpct.value)||0;const descr=f.desc.value.trim();const wmin=Number(f.wmin.value)||0;const wmax=Number(f.wmax.value)||0;const mpt=Number(f.mpt.value)||0;const goldPct=Number(f.gold.value)||0;const rainbowPct=Number(f.rainbow.value)||0;const valueRegular=Number(f.valReg.value)||0;const valueGold=Number(f.valGold.value)||0;const valueRainbow=Number(f.valRainbow.value)||0;if(!name)return alert('Enter pet name');if(wmax<wmin)return alert('Weight max must be >= min');const otherTotal=(egg.pets||[]).reduce((s,p)=>s+(p.rarityPct||0),0);if(otherTotal+rpct>100){if(!confirm('Total rarity % will exceed 100%. Continue?'))return}const p={id:uid('pet'),name,rarityText:rtext,rarityPct:rpct,description:descr,weightMin:wmin,weightMax:wmax,moneyPerTap:mpt,goldPct:goldPct,rainbowPct:rainbowPct,valueRegular:valueRegular,valueGold:valueGold,valueRainbow:valueRainbow};egg.pets.push(p);save(S_EGGS,eggs);render()}));}

function showPetEditModal(egg,pet){const cont=document.createElement('div');cont.innerHTML='<h4>Edit Pet</h4>';const inName=document.createElement('input');inName.value=pet.name;cont.appendChild(document.createTextNode('Name'));cont.appendChild(inName);cont.appendChild(document.createElement('br'));const inRtext=document.createElement('input');inRtext.value=pet.rarityText;cont.appendChild(document.createTextNode('Rarity text'));cont.appendChild(inRtext);cont.appendChild(document.createElement('br'));const inRp=document.createElement('input');inRp.type='number';inRp.value=pet.rarityPct;cont.appendChild(document.createTextNode('Rarity %'));cont.appendChild(inRp);cont.appendChild(document.createElement('br'));const inDesc=document.createElement('textarea');inDesc.value=pet.description;cont.appendChild(document.createTextNode('Description'));cont.appendChild(inDesc);cont.appendChild(document.createElement('br'));const inWmin=document.createElement('input');inWmin.type='number';inWmin.step='0.1';inWmin.value=pet.weightMin;cont.appendChild(document.createTextNode('Weight min'));cont.appendChild(inWmin);cont.appendChild(document.createElement('br'));const inWmax=document.createElement('input');inWmax.type='number';inWmax.step='0.1';inWmax.value=pet.weightMax;cont.appendChild(document.createTextNode('Weight max'));cont.appendChild(inWmax);cont.appendChild(document.createElement('br'));const inMpt=document.createElement('input');inMpt.type='number';inMpt.step='0.01';inMpt.value=pet.moneyPerTap;cont.appendChild(document.createTextNode('Money per tap'));cont.appendChild(inMpt);cont.appendChild(document.createElement('br'));const inGold=document.createElement('input');inGold.type='number';inGold.value=pet.goldPct||0;cont.appendChild(document.createTextNode('Gold chance (%)'));cont.appendChild(inGold);cont.appendChild(document.createElement('br'));const inRainbow=document.createElement('input');inRainbow.type='number';inRainbow.value=pet.rainbowPct||0;cont.appendChild(document.createTextNode('Rainbow chance (%)'));cont.appendChild(inRainbow);cont.appendChild(document.createElement('br'));const inValReg=document.createElement('input');inValReg.type='number';inValReg.step='0.01';inValReg.value=pet.valueRegular||0;cont.appendChild(document.createTextNode('Regular trade value'));cont.appendChild(inValReg);cont.appendChild(document.createElement('br'));const inValGold=document.createElement('input');inValGold.type='number';inValGold.step='0.01';inValGold.value=pet.valueGold||0;cont.appendChild(document.createTextNode('Gold trade value'));cont.appendChild(inValGold);cont.appendChild(document.createElement('br'));const inValRainbow=document.createElement('input');inValRainbow.type='number';inValRainbow.step='0.01';inValRainbow.value=pet.valueRainbow||0;cont.appendChild(document.createTextNode('Rainbow trade value'));cont.appendChild(inValRainbow);cont.appendChild(document.createElement('br'));
 cont.appendChild(btn('Save Pet','primary',()=>{pet.name=inName.value.trim()||pet.name;pet.rarityText=inRtext.value.trim()||pet.rarityText;pet.rarityPct=Number(inRp.value)||0;pet.description=inDesc.value.trim();pet.weightMin=Number(inWmin.value)||0;pet.weightMax=Number(inWmax.value)||0;pet.moneyPerTap=Number(inMpt.value)||0;pet.goldPct=Number(inGold.value)||0;pet.rainbowPct=Number(inRainbow.value)||0;pet.valueRegular=Number(inValReg.value)||0;pet.valueGold=Number(inValGold.value)||0;pet.valueRainbow=Number(inValRainbow.value)||0;accounts.forEach(acc=>{if(!acc.inventory)return;acc.inventory.forEach(inst=>{if(inst.basePetId&&inst.basePetId===pet.id){const variant=inst.variant;inst.baseName=pet.name;inst.rarityText=pet.rarityText;inst.rarityPct=pet.rarityPct;inst.description=pet.description;inst.weightMin=pet.weightMin;inst.weightMax=pet.weightMax;inst.moneyPerTap=pet.moneyPerTap;inst.valueRegular=Number(pet.valueRegular||0);inst.valueGold=Number(pet.valueGold||0);inst.valueRainbow=Number(pet.valueRainbow||0);inst.name=pet.name+(variant?('('+variant+')'):'');inst.variantMultiplier=variant==='gold'?2:(variant==='rainbow'?5:1)}})});save(S_EGGS,eggs);save(S_ACCTS,accounts);closeModal();render()}));cont.appendChild(btn('Cancel','',()=>closeModal()));openModal('Edit Pet',[cont])}

function renderPlay(){L.innerHTML='';L.appendChild(Object.assign(document.createElement('h3'),{textContent:'Play Mode'}));const nameIn=document.createElement('input');nameIn.placeholder='Player name';const moneyIn=document.createElement('input');moneyIn.type='number';moneyIn.value=100;L.appendChild(Object.assign(document.createElement('label'),{textContent:'Create Save (Account) name'}));L.appendChild(nameIn);L.appendChild(Object.assign(document.createElement('label'),{textContent:'Starting money'}));L.appendChild(moneyIn);const r=document.createElement('div');r.className='row';r.style.marginTop='8px';r.appendChild(btn('Create Account','primary',()=>{const name=nameIn.value.trim();const money=Number(moneyIn.value)||0;if(!name)return alert('Enter an account name');const a={id:uid('acc'),name,money,stars:0,inventory:[],equippedPetId:null};accounts.push(a);save(S_ACCTS,accounts);selectedAccountId=a.id;render()}));r.appendChild(btn('Import accounts JSON','',()=>{const raw=prompt('Paste accounts JSON');try{const imp=JSON.parse(raw||'[]');accounts=imp;normalizeData();save(S_ACCTS,accounts);render()}catch(e){alert('Invalid JSON')}}));L.appendChild(r);L.appendChild(Object.assign(document.createElement('h4'),{textContent:'Your Accounts'}));const list=document.createElement('div');list.className='scroll-list';accounts.forEach(a=>{const totalPetValue=(a.inventory||[]).reduce((s,p)=>s+Number(getPetTradeValue(p)||0),0);const totalPetValueDisplay=Number(totalPetValue).toFixed(2);const d=document.createElement('div');d.className='acct-item row';if(a.id===selectedAccountId)d.style.outline='2px solid rgba(11,103,255,0.12)';d.innerHTML=`<div style="flex:1"><strong>${esc(a.name)}</strong><div class="small muted">Money: ${Number(a.money).toFixed(2)} â€¢ Items: ${a.inventory.length} â€¢ Value: ${totalPetValueDisplay}</div></div>`;const ctr=document.createElement('div');ctr.className='row';ctr.appendChild(btn('Play','',()=>{selectedAccountId=a.id;render()}));ctr.appendChild(btn('Delete','',()=>{if(confirm('Delete this account?')){accounts=accounts.filter(x=>x.id!==a.id);save(S_ACCTS,accounts);if(selectedAccountId===a.id)selectedAccountId=null;render()}}));d.appendChild(ctr);list.appendChild(d)});L.appendChild(list);if(selectedAccountId){const acc=accounts.find(a=>a.id===selectedAccountId);if(acc)renderPlayArea(acc);else{selectedAccountId=null;R.innerHTML='<div class="muted">Select an account</div>'}}else R.innerHTML='<div class="muted">Select an account to play</div>'}

function renderPlayArea(account){R.innerHTML='';const headerRow=document.createElement('div');headerRow.className='row';headerRow.style.justifyContent='space-between';const left=document.createElement('div');left.innerHTML=`<h3>Playing: ${esc(account.name)}</h3><div class="small muted">Coins: ${Number(account.money).toFixed(2)} â€¢ Stars: ${Number(account.stars||0)}</div>`;const right=document.createElement('div');right.className='row';right.appendChild(btn('Open Shop','primary',()=>openShopModal(account)));right.appendChild(btn('Earn Coins (tap)','',()=>{const earned=doEarn(account);if(earned<=0)alert('No pet equipped. Equip a pet to earn coins.');else{account.money+=earned;save(S_ACCTS,accounts);const cur=document.querySelector('.inv-grid');if(cur)inventoryScroll[account.id]=cur.scrollTop||0;render();alert('Earned '+earned.toFixed(2)+' coins')}}));headerRow.appendChild(left);headerRow.appendChild(right);R.appendChild(headerRow);
 const moneyRow=document.createElement('div');moneyRow.className='row';const moneyInput=document.createElement('input');moneyInput.type='number';moneyInput.step='0.01';moneyInput.placeholder='Amount';moneyInput.style.width='120px';moneyRow.appendChild(moneyInput);moneyRow.appendChild(btn('Add Money','',()=>{const amt=Number(moneyInput.value)||0;if(amt===0)return;const cur=document.querySelector('.inv-grid');if(cur)inventoryScroll[account.id]=cur.scrollTop||0;account.money+=amt;save(S_ACCTS,accounts);render()}));moneyRow.appendChild(btn('Subtract Money','',()=>{const amt=Number(moneyInput.value)||0;if(amt===0)return;const cur=document.querySelector('.inv-grid');if(cur)inventoryScroll[account.id]=cur.scrollTop||0;account.money-=amt;save(S_ACCTS,accounts);render()}));R.appendChild(moneyRow);
 R.appendChild(Object.assign(document.createElement('h4'),{textContent:'Items'}));
 const invGrid=document.createElement('div');invGrid.className='inv-grid';invGrid.style.maxHeight='420px';invGrid.style.overflow='auto';
 // separate pets and eggs
 const pets = (account.inventory||[]).filter(i=>i.itemType!=='egg');
 const eggsOnly = (account.inventory||[]).filter(i=>i.itemType==='egg');
 // group pets by baseName/type and sort groups alphabetically
 const petGroups={};pets.forEach(p=>{const key=(p.baseName||(p.name||'Unknown')).toString();if(!petGroups[key])petGroups[key]=[];petGroups[key].push(p)});
 const petKeys=Object.keys(petGroups).sort((a,b)=>a.localeCompare(b,'en',{sensitivity:'base'}));
 if(petKeys.length===0){ const noPets=document.createElement('div');noPets.className='muted';noPets.textContent='No pets in inventory.';invGrid.appendChild(noPets); }else{
   // centered subtitle for all pets section
   const petHeader=document.createElement('div');petHeader.className='subtitle-centered';petHeader.textContent='pet';invGrid.appendChild(petHeader);
   petKeys.forEach(pk=>{
     const subgroup=petGroups[pk];
     // left-aligned subtitle for this pet type
     const typeTitle=document.createElement('div');typeTitle.className='group-subtitle';typeTitle.textContent=pk;invGrid.appendChild(typeTitle);
     // sort pets in this subgroup alphabetically by display name
     subgroup.sort((a,b)=> (a.name||'').toString().localeCompare((b.name||''), 'en', {sensitivity:'base'}));
     subgroup.forEach(p=>{
       const card=document.createElement('div');card.className='inv-card';
       const left=document.createElement('div');left.style.flex='1';left.style.display='flex';left.style.flexDirection='column';
       const nameEl=document.createElement('div');nameEl.innerHTML=`<strong>${esc(p.name)}</strong>`;const meta=document.createElement('div');meta.className='meta';let wtext='';if(p.weight!==undefined&&p.weight!==null)wtext=(Number(p.weight).toFixed(2)+'kg');meta.textContent=`${p.rarityText||''}${wtext?(' â€¢ '+wtext):''}`;const desc=document.createElement('div');desc.className='small';desc.textContent=p.description||'';left.appendChild(nameEl);left.appendChild(meta);left.appendChild(desc);
       const right=document.createElement('div');right.style.display='flex';right.style.flexDirection='column';right.style.alignItems='flex-end';right.style.gap='6px';const value=document.createElement('div');value.className='small muted';value.textContent='Value: '+Number(getPetTradeValue(p)).toFixed(2);const ctr=document.createElement('div');ctr.className='controls';const equipBtn=btn(account.equippedPetId===p.instanceId?'Equipped':'Equip','',()=>{const cur=document.querySelector('.inv-grid');if(cur)inventoryScroll[account.id]=cur.scrollTop||0;account.equippedPetId=p.instanceId;save(S_ACCTS,accounts);render()});ctr.appendChild(equipBtn);right.appendChild(value);right.appendChild(ctr);card.appendChild(left);card.appendChild(right);invGrid.appendChild(card);
     });
   });
 }
 // centered separator between pets and eggs
 const sep=document.createElement('div');sep.className='subtitle-centered';sep.textContent='egg';invGrid.appendChild(sep);
 // eggs: sort by egg name alphabetically
 if(eggsOnly.length===0){ const noEggs=document.createElement('div');noEggs.className='muted';noEggs.textContent='No eggs in inventory.';invGrid.appendChild(noEggs); }else{
   eggsOnly.sort((a,b)=> (a.name||'').toString().localeCompare((b.name||''), 'en', {sensitivity:'base'}));
   eggsOnly.forEach(ei=>{
     const card=document.createElement('div');card.className='inv-card';
     const left=document.createElement('div');left.style.flex='1';left.style.display='flex';left.style.flexDirection='column';const nameEl=document.createElement('div');nameEl.innerHTML=`<strong>${esc(ei.name)}</strong>`;const meta=document.createElement('div');meta.className='meta';meta.textContent='Qty: '+(ei.qty||1);const desc=document.createElement('div');desc.className='small';desc.textContent=ei.description||'';left.appendChild(nameEl);left.appendChild(meta);left.appendChild(desc);const right=document.createElement('div');right.style.display='flex';right.style.flexDirection='column';right.style.alignItems='flex-end';right.style.gap='6px';const value=document.createElement('div');value.className='small muted';value.textContent='Value: '+Number(getPetTradeValue(ei)).toFixed(2);const ctr=document.createElement('div');ctr.className='controls';ctr.appendChild(btn('Open','',()=>{const cur=document.querySelector('.inv-grid');if(cur)inventoryScroll[account.id]=cur.scrollTop||0;openEggInstance(account,ei)}));right.appendChild(value);right.appendChild(ctr);card.appendChild(left);card.appendChild(right);invGrid.appendChild(card);
   });
 }
 R.appendChild(invGrid);
 if(inventoryScroll[account.id])try{invGrid.scrollTop=inventoryScroll[account.id]}catch(e){}
 R.appendChild(Object.assign(document.createElement('h4'),{textContent:'Actions'}));R.appendChild(btn('Save Account','',()=>{save(S_ACCTS,accounts);alert('Saved')}));R.appendChild(btn('Quick Delete','',()=>{openQuickDeleteModal(account)}));}

function openEggInstance(account,eggInst){if(!eggInst || eggInst.itemType!=='egg')return;const eggDef=eggs.find(e=>e.id===eggInst.baseEggId);if(!eggDef)return alert('Egg data not found');if((eggInst.qty||1)<=0)return alert('No eggs to open');
 // preserve scroll
 const cur=document.querySelector('.inv-grid');if(cur)inventoryScroll[account.id]=cur.scrollTop||0;
 // consume one
 eggInst.qty=(eggInst.qty||1)-1; if(eggInst.qty<=0){account.inventory=account.inventory.filter(x=>x.instanceId!==eggInst.instanceId);} // produce pet
 const result=rollPetFromEgg(eggDef);const variant=determineVariant(result);const weight=+(result.weightMin+Math.random()*(result.weightMax-result.weightMin)).toFixed(2);const instanceName=result.name+(variant?(' ('+variant+')'):'');const valueRegular=Number(result.valueRegular||0);const valueGold=Number(result.valueGold||0);const valueRainbow=Number(result.valueRainbow||0);const variantMultiplier=variant==='gold'?2:variant==='rainbow'?5:1;const inst={instanceId:uid('inst'),basePetId:result.id,name:instanceName,baseName:result.name,variant:variant,variantMultiplier:variantMultiplier,rarityText:result.rarityText,rarityPct:result.rarityPct,description:result.description,weight:weight,weightMin:result.weightMin,weightMax:result.weightMax,moneyPerTap:result.moneyPerTap,valueRegular:valueRegular,valueGold:valueGold,valueRainbow:valueRainbow,createdAt:Date.now()};account.inventory.push(inst);save(S_ACCTS,accounts);save(S_EGGS,eggs);render();const d=document.createElement('div');d.innerHTML=`<h4>You opened: ${esc(instanceName)}</h4><div class="small muted">Rarity: ${esc(result.rarityText)} â€” ${result.rarityPct||0}%</div><div class="small muted">Weight: ${weight}kg</div>`;openModal('Egg opened',[d]);}

function openQuickDeleteModal(account){const cont=document.createElement('div');cont.innerHTML=`<h4>Quick delete items from ${esc(account.name)}</h4>`;const listWrap=document.createElement('div');listWrap.style.maxHeight='360px';listWrap.style.overflow='auto';listWrap.style.marginTop='8px';if(!account.inventory||!account.inventory.length){const empty=document.createElement('div');empty.className='muted';empty.textContent='No items to delete.';listWrap.appendChild(empty)}else{const groups={};account.inventory.forEach(p=>{const key=(p.baseName||(p.name||'')).toString();if(!groups[key])groups[key]=[];groups[key].push(p)});const keys=Object.keys(groups).sort((a,b)=>a.toLowerCase().localeCompare(b.toLowerCase()));keys.forEach(k=>{const header=document.createElement('div');header.style.fontWeight='700';header.style.marginTop='8px';header.textContent=k;listWrap.appendChild(header);groups[k].forEach(p=>{const row=document.createElement('label');row.style.display='flex';row.style.alignItems='center';row.style.gap='8px';row.style.border='1px solid #eee';row.style.padding='6px';row.style.borderRadius='6px';row.style.marginTop='6px';const chk=document.createElement('input');chk.type='checkbox';chk.dataset.id=p.instanceId;const info=document.createElement('div');info.style.flex='1';info.innerHTML=`<strong>${esc(p.name)}</strong> <div class="small muted">${esc(p.rarityText||'')} ${p.itemType==='egg' ? ('â€¢ qty: '+(p.qty||1)) : ('â€¢ '+Number(p.weight||0).toFixed(2)+'kg')}</div>`;const val=document.createElement('div');val.className='small';val.textContent=Number(getPetTradeValue(p)).toFixed(2);row.appendChild(chk);row.appendChild(info);row.appendChild(val);listWrap.appendChild(row)})})}
 cont.appendChild(listWrap);const footer=document.createElement('div');footer.className='row';footer.style.justifyContent='flex-end';footer.style.gap='8px';footer.style.marginTop='8px';const cancelBtn=btn('Cancel','',()=>closeModal());const deleteBtn=btn('Delete selected','primary',()=>{const checks=MB.querySelectorAll('input[type="checkbox"][data-id]');const ids=[];checks.forEach(c=>{if(c.checked)ids.push(c.dataset.id)});if(!ids.length)return alert('No items selected');if(!confirm(`Delete ${ids.length} item(s)? This cannot be undone.`))return;account.inventory=account.inventory.filter(x=>!ids.includes(x.instanceId));if(account.equippedPetId&&ids.includes(account.equippedPetId))account.equippedPetId=null;save(S_ACCTS,accounts);closeModal();render();alert('Deleted '+ids.length+' item(s)')});footer.appendChild(cancelBtn);footer.appendChild(deleteBtn);cont.appendChild(footer);openModal('Quick Delete',[cont])}

function openShopModal(account){const visibleEggs=eggs.filter(e=>e.visible===undefined?true:e.visible);const cont=document.createElement('div');const topRow=document.createElement('div');topRow.className='row';topRow.style.justifyContent='space-between';topRow.style.marginBottom='8px';const left=document.createElement('div');left.innerHTML=`<strong>${esc(account.name)}</strong> <div class="small muted">Coins: ${Number(account.money).toFixed(2)} â€¢ Stars: ${Number(account.stars||0)}</div>`;const right=document.createElement('div');right.className='row';const starInput=document.createElement('input');starInput.type='number';starInput.placeholder='Stars';starInput.style.width='120px';right.appendChild(starInput);right.appendChild(btn('Add Stars','',()=>{const amt=Number(starInput.value)||0;if(amt===0)return;account.stars=(Number(account.stars)||0)+amt;save(S_ACCTS,accounts);render();openShopModal(account)}));right.appendChild(btn('Subtract Stars','',()=>{const amt=Number(starInput.value)||0;if(amt===0)return;if((Number(account.stars)||0)<amt)return alert('Not enough stars');account.stars=(Number(account.stars)||0)-amt;save(S_ACCTS,accounts);render();openShopModal(account)}));topRow.appendChild(left);topRow.appendChild(right);cont.appendChild(topRow);if(!visibleEggs.length){cont.innerHTML+='<div class="muted">No eggs available. Toggle in Create mode.</div>';openModal('Shop',[cont]);return}
 const grid=document.createElement('div');grid.className='shop-grid';visibleEggs.forEach(egg=>{const card=document.createElement('div');card.className='shop-card';card.appendChild(Object.assign(document.createElement('h4'),{textContent:`${egg.name} â€” ${formatPrice(egg)}`}));const vis=document.createElement('div');vis.className='visibility-badge';vis.textContent=egg.visible?'Visible':'Hidden';card.appendChild(vis);const petList=document.createElement('div');petList.style.flex='1';if(!egg.pets||!egg.pets.length)petList.innerHTML='<div class="muted">No pets</div>';else egg.pets.forEach(p=>{const pdiv=document.createElement('div');pdiv.className='pet-line';pdiv.textContent=`${p.name} â€” ${p.rarityText} â€” ${p.rarityPct||0}% â€” Value: ${Number(p.valueRegular||0)}`;petList.appendChild(pdiv)});card.appendChild(petList);const row=document.createElement('div');row.className='row';row.appendChild(btn('Buy (add egg to inventory)','primary',()=>{const price=Number(egg.price)||0;if(egg.currency==='s'){if((Number(account.stars)||0)<price)return alert('Not enough stars');account.stars=(Number(account.stars)||0)-price}else{if(account.money<price)return alert('Not enough coins');account.money-=price}
 // add egg as stackable item
 const existing=account.inventory.find(i=>i.itemType==='egg'&&i.baseEggId===egg.id);if(existing){existing.qty=(existing.qty||1)+1;}else{const inst={instanceId:uid('egg'),itemType:'egg',baseEggId:egg.id,name:egg.name,baseName:egg.name,qty:1,tradeValue:Number(egg.tradeValue||0),description:egg.description||'',createdAt:Date.now()};account.inventory.push(inst)}save(S_ACCTS,accounts);openShopModal(account);render();alert(`Added 1 ${egg.name} to inventory`) }));row.appendChild(btn('Details','',()=>{const d=document.createElement('div');d.innerHTML=`<h4>${esc(egg.name)}</h4><div class="small muted">Price: ${formatPrice(egg)} â€” Pets: ${egg.pets.length} â€” Trade value: ${Number(egg.tradeValue||0)}</div>`;const list=document.createElement('div');if(!egg.pets||!egg.pets.length)list.innerHTML='<div class="muted">No pets</div>';else egg.pets.forEach(p=>{const r=document.createElement('div');r.className='pet-line';r.textContent=`${p.name} â€” ${p.rarityText} â€” ${p.rarityPct||0}% â€” Value: ${Number(p.valueRegular||0)} / G:${Number(p.valueGold||0)} / R:${Number(p.valueRainbow||0)}`;list.appendChild(r)});d.appendChild(list);openModal('Egg details',[d])}));card.appendChild(row);grid.appendChild(card)});cont.appendChild(grid);openModal('Shop',[cont])}

function rollPetFromEgg(egg){const total=egg.pets.reduce((s,p)=>s+(p.rarityPct||0),0);let roll=Math.random()*100;if(total<=0)return egg.pets[Math.floor(Math.random()*egg.pets.length)];for(let p of egg.pets){if(roll<p.rarityPct)return p;roll-=p.rarityPct}return egg.pets[Math.floor(Math.random()*egg.pets.length)]}
function determineVariant(basePet){if((basePet.rainbowPct||0)>0&&Math.random()*100<basePet.rainbowPct)return 'rainbow';if((basePet.goldPct||0)>0&&Math.random()*100<basePet.goldPct)return 'gold';return null}
function getPetTradeValue(p){if(!p)return 0;if(p.itemType==='egg')return Number(p.tradeValue||0)*(p.qty||1);if(p.variant==='gold')return Number(p.valueGold||0);if(p.variant==='rainbow')return Number(p.valueRainbow||0);return Number(p.valueRegular||0)}
function doEarn(account){const pet=account.inventory.find(p=>p.instanceId===account.equippedPetId);if(!pet)return 0;const base=Number(pet.moneyPerTap)||0;const minW=Number(pet.weightMin)||0;const w=Number(pet.weight)||minW;const extraKgs=Math.floor(Math.max(0,w-minW));const weightMultiplier=1+(0.10*extraKgs);const variantMultiplier=Number(pet.variantMultiplier)||(pet.variant==='gold'?2:pet.variant==='rainbow'?5:1);return+(base*weightMultiplier*variantMultiplier).toFixed(2)}

// Random helpers unchanged
function buildUniformVariantPool(){const pool=[];const bases=getAllBasePets();bases.forEach(bp=>{pool.push({base:bp,variant:null});pool.push({base:bp,variant:'gold'});pool.push({base:bp,variant:'rainbow'})});return pool}
function makeRandomInstanceFromPoolItem(item){const base=item.base;const variant=item.variant;const weight=+((base.weightMin)+Math.random()*(Math.max(0,base.weightMax-base.weightMin))).toFixed(2);const name=base.name+(variant?(' ('+variant+')'):'');const variantMultiplier=variant==='gold'?2:(variant==='rainbow'?5:1);return{instanceId:uid('rand'),basePetId:base.id,name,baseName:base.name,variant,variantMultiplier,rarityText:base.rarityText,rarityPct:base.rarityPct,description:base.description,weight,weightMin:base.weightMin,weightMax:base.weightMax,moneyPerTap:base.moneyPerTap,valueRegular:Number(base.valueRegular||0),valueGold:Number(base.valueGold||0),valueRainbow:Number(base.valueRainbow||0),createdAt:Date.now(),__randomSource:true}}
function generateRandomChoices(n){const pool=buildUniformVariantPool();if(pool.length===0)return[];const choices=[];const usedIdx=new Set();while(choices.length<n&&usedIdx.size<pool.length){const idx=Math.floor(Math.random()*pool.length);if(usedIdx.has(idx))continue;usedIdx.add(idx);choices.push(makeRandomInstanceFromPoolItem(pool[idx]))}return choices}

// --- New trade UI / logic: single + button per side, unlimited offers, eggs stack in trade ---
function renderTrade(){L.innerHTML='';L.appendChild(Object.assign(document.createElement('h3'),{textContent:'Trading Mode'}));
 const sel1=document.createElement('select');sel1.id='tradeAcc1';sel1.innerHTML='<option value="">-- Select --</option>'+accounts.map(a=>`<option value="${a.id}">${esc(a.name)}</option>`).join('');
 const sel2=document.createElement('select');sel2.id='tradeAcc2';sel2.innerHTML='<option value="">-- Select --</option>'+accounts.map(a=>`<option value="${a.id}">${esc(a.name)}</option>`).join('')+'<option value="__random">Random (simulated)</option>';
 sel1.innerHTML='<option value="">-- Select --</option>'+accounts.map(a=>`<option value="${a.id}">${esc(a.name)}</option>`).join('')+'<option value="__random">Random (simulated)</option>';
 L.appendChild(sel1);L.appendChild(sel2);L.appendChild(btn('Start Trade','primary',()=>startTrade()));R.innerHTML='<div class="muted">Choose two accounts and press Start Trade.</div>'}

function startTrade(){const sel1=document.getElementById('tradeAcc1'),sel2=document.getElementById('tradeAcc2');if(!sel1||!sel2)return alert('Trade selectors not found');const v1=sel1.value,v2=sel2.value;if(!v1||!v2)return alert('Choose two accounts (or Random).');if(v1===v2)return alert('Choose two different accounts');trade={acc1:v1,acc2:v2,offers1:[],offers2:[]};drawTradeArea();}

function drawTradeArea(){const a1=(trade.acc1==='__random')?null:accounts.find(x=>x.id===trade.acc1);const a2=(trade.acc2==='__random')?null:accounts.find(x=>x.id===trade.acc2);const isRandom1=trade.acc1==='__random',isRandom2=trade.acc2==='__random';if(!a1&&!a2){renderTrade();return}
 L.innerHTML=`<h3>Trading: ${isRandom1?'Random (simulated)':esc(a1.name)} â‡„ ${isRandom2?'Random (simulated)':esc(a2.name)}</h3><div class="muted">Click + to add items from each account. Click an item in the offer list to remove (returns to inventory).</div>`;
 R.innerHTML='';
 const container=document.createElement('div');container.className='trade-area';
 // left offer column
 const col1=document.createElement('div');col1.style.flex='1';
 const header1=document.createElement('div');header1.innerHTML=`<strong>${isRandom1?'Random (simulated)':esc(a1.name)}</strong> <span class="small muted"> â€” Offer value: </span> <span class="trade-total">${Number(computeOffersValue(trade.offers1)).toFixed(2)}</span>`;col1.appendChild(header1);
 const offerBox1=document.createElement('div');offerBox1.className='offer-list';col1.appendChild(offerBox1);
 const addBtn1=btn('+ Add','',()=>{openAddModalForSide(1,a1,isRandom1)});col1.appendChild(addBtn1);
 // right offer column
 const col2=document.createElement('div');col2.style.flex='1';
 const header2=document.createElement('div');header2.innerHTML=`<strong>${isRandom2?'Random (simulated)':esc(a2.name)}</strong> <span class="small muted"> â€” Offer value: </span> <span class="trade-total">${Number(computeOffersValue(trade.offers2)).toFixed(2)}</span>`;col2.appendChild(header2);
 const offerBox2=document.createElement('div');offerBox2.className='offer-list';col2.appendChild(offerBox2);
 const addBtn2=btn('+ Add','',()=>{openAddModalForSide(2,a2,isRandom2)});col2.appendChild(addBtn2);
 container.appendChild(col1);container.appendChild(col2);
 // populate offers
 function renderOffers(box,offers,side){box.innerHTML='';if(!offers.length){const em=document.createElement('div');em.className='muted';em.textContent='No items added.';box.appendChild(em);return}offers.forEach((it,idx)=>{const row=document.createElement('div');row.className='offer-item';let label='';if(it.itemType==='egg'){label=`${it.name} x${it.qty}`;}else{label=`${it.name}`;}const left=document.createElement('div');left.textContent=label;const right=document.createElement('div');right.className='small muted';right.textContent=Number(getPetTradeValue(it)).toFixed(2);row.appendChild(left);row.appendChild(right);row.addEventListener('click',()=>{removeOffer(side,idx);});box.appendChild(row)})}
 renderOffers(offerBox1,trade.offers1,1);renderOffers(offerBox2,trade.offers2,2);
 // footer actions
 const footer=document.createElement('div');footer.className='trade-actions';footer.appendChild(btn('Finalize Trade','primary',()=>finalizeTrade()));footer.appendChild(btn('Cancel Trade','',()=>{if(confirm('Cancel trade and return items?')){cancelTrade();render();}}));
 R.appendChild(container);R.appendChild(footer);
}

// open modal to add items from account side (side=1 or 2). If isRandom, allow picking random pets.
function openAddModalForSide(side,account,isRandom){if(isRandom){const cont=document.createElement('div');cont.innerHTML=`<div class="small muted">Choose from 5 random pets (variants included). Each open regenerates the list.</div>`;const choicesWrap=document.createElement('div');choicesWrap.style.marginTop='8px';const choices=generateRandomChoices(5);choices.forEach(ch=>{const row=document.createElement('div');row.className='inv-item';row.style.display='flex';row.style.justifyContent='space-between';row.style.alignItems='center';row.innerHTML=`<div style="flex:1"><strong>${esc(ch.name)}</strong><div class="small muted">${esc(ch.rarityText)} â€¢ ${Number(ch.weight).toFixed(2)}kg â€¢ Value: ${Number(getPetTradeValue(ch)).toFixed(2)}</div></div>`;row.style.cursor='pointer';row.addEventListener('click',()=>{addOffer(side,ch,1,true);closeModal();drawTradeArea()});choicesWrap.appendChild(row)});cont.appendChild(choicesWrap);openModal('Random choices',[cont]);return}
 if(!account || !account.inventory || !account.inventory.length)return alert('This account has no items');
 const cont=document.createElement('div');cont.innerHTML=`<div class="small muted">Click an item to add it to the trade. For eggs you can choose amount (defaults to 1).</div>`;const listWrap=document.createElement('div');listWrap.style.maxHeight='420px';listWrap.style.overflow='auto';listWrap.style.marginTop='8px';
 // group inventory into pets by type and eggs separately, with alphabetical order
 const pets = account.inventory.filter(i=>i.itemType!=='egg');
 const eggsOnly = account.inventory.filter(i=>i.itemType==='egg');
 const petGroups={};pets.forEach(p=>{const key=(p.baseName||(p.name||'Unknown')).toString();if(!petGroups[key])petGroups[key]=[];petGroups[key].push(p)});
 const petKeys=Object.keys(petGroups).sort((a,b)=>a.localeCompare(b,'en',{sensitivity:'base'}));
 if(petKeys.length>0){const header=document.createElement('div');header.className='subtitle-centered';header.textContent='pet';listWrap.appendChild(header);
   petKeys.forEach(pk=>{const headerLeft=document.createElement('div');headerLeft.className='group-subtitle';headerLeft.textContent=pk;listWrap.appendChild(headerLeft);const groupList=document.createElement('div');groupList.className='group-list';petGroups[pk].sort((a,b)=> (a.name||'').toString().localeCompare((b.name||''), 'en', {sensitivity:'base'})).forEach(p=>{const div=document.createElement('div');div.className='inv-item';div.style.display='flex';div.style.justifyContent='space-between';div.style.alignItems='center';div.innerHTML=`<div style="flex:1"><strong>${esc(p.name)}</strong><div class="small muted">${esc(p.rarityText)} â€¢ ${p.weight?Number(p.weight).toFixed(2)+'kg':''}</div></div><div class="small">Value: ${Number(getPetTradeValue(p)).toFixed(2)}</div>`;div.style.cursor='pointer';div.addEventListener('click',()=>{const idx=account.inventory.findIndex(x=>x.instanceId===p.instanceId);if(idx===-1)return alert('Item not found');const inst=account.inventory.splice(idx,1)[0];inst.origin=account.id;addOffer(side,inst,1,false);save(S_ACCTS,accounts);closeModal();drawTradeArea()});groupList.appendChild(div)});listWrap.appendChild(groupList)})}
 // eggs section
 const sep=document.createElement('div');sep.className='subtitle-centered';sep.textContent='egg';listWrap.appendChild(sep);
 if(eggsOnly.length>0){eggsOnly.sort((a,b)=> (a.name||'').toString().localeCompare((b.name||''), 'en', {sensitivity:'base'}));eggsOnly.forEach(p=>{const div=document.createElement('div');div.className='inv-item';div.style.display='flex';div.style.justifyContent='space-between';div.style.alignItems='center';div.innerHTML=`<div style="flex:1">${esc(p.name)} (x${p.qty||1})</div><div class="small">Value: ${Number(getPetTradeValue(p)).toFixed(2)}</div>`;div.style.cursor='pointer';div.addEventListener('click',()=>{let max=Number(p.qty||1);let amt=prompt('Amount to add to trade (max '+max+')','1');if(amt===null)return;amt=Number(amt)||0;if(amt<=0)return alert('Invalid amount');if(amt>max)amt=max;addEggToTrade(side,account,p,amt);closeModal();drawTradeArea()});listWrap.appendChild(div)})}else{const empty=document.createElement('div');empty.className='muted';empty.textContent='No eggs';listWrap.appendChild(empty)}
 cont.appendChild(listWrap);openModal('Choose item to add',[cont]);}

function addEggToTrade(side,account,eggItem,amount){amount=Number(amount)||1; if(amount<=0)return; // decrement from account inventory
 const invIndex=account.inventory.findIndex(x=>x.instanceId===eggItem.instanceId);if(invIndex===-1)return alert('Egg item not found');const invItem=account.inventory[invIndex];if((invItem.qty||0)<amount)return alert('Not enough eggs');invItem.qty=(invItem.qty||0)-amount;if(invItem.qty<=0){account.inventory.splice(invIndex,1);} // add to trade offers (stack if same baseEggId)
 const offers = (side===1)?trade.offers1:trade.offers2;const existingIndex=offers.findIndex(o=>o.itemType==='egg'&&o.baseEggId===eggItem.baseEggId&&o.origin===account.id);if(existingIndex>-1){offers[existingIndex].qty += amount;}else{offers.push({instanceId:uid('trade'),itemType:'egg',baseEggId:eggItem.baseEggId,name:eggItem.name,baseName:eggItem.baseName,qty:amount,tradeValue:Number(eggItem.tradeValue||eggItem.tradeValue||0),description:eggItem.description||'',origin:account.id})}
 save(S_ACCTS,accounts);}

function addOffer(side,item,cnt,isRandom){ // item can be a pet instance (object) or random pet; cnt ignored for pets
 const offers = (side===1)?trade.offers1:trade.offers2; if(item.itemType==='egg'){ // already handled by addEggToTrade
 return }
 // for pet instances, they should have been removed from account.inventory before adding (for real accounts)
 const entry=Object.assign({},item);entry.origin = (isRandom?null:(side===1?trade.acc1:trade.acc2));offers.push(entry);}

function removeOffer(side,index){const offers=(side===1)?trade.offers1:trade.offers2;const it=offers[index];if(!it)return; // return to origin account if applicable
 if(it.itemType==='egg'){ // return qty back to origin account inventory
 const originId=it.origin;const acc=accounts.find(a=>a.id===originId);if(acc){const existing=acc.inventory.find(i=>i.itemType==='egg'&&i.baseEggId===it.baseEggId);if(existing){existing.qty=(existing.qty||0)+it.qty;}else{const inst={instanceId:uid('egg'),itemType:'egg',baseEggId:it.baseEggId,name:it.name,baseName:it.baseName,qty:it.qty,tradeValue:Number(it.tradeValue||0),description:it.description||'',createdAt:Date.now()};acc.inventory.push(inst)}save(S_ACCTS,accounts)} }else{ // pet instance
 const originId=it.origin;const acc=accounts.find(a=>a.id===originId);if(acc){acc.inventory.push(it);save(S_ACCTS,accounts)} }
 offers.splice(index,1);drawTradeArea();}

function computeOffersValue(offers){return offers.reduce((s,it)=>s+Number(getPetTradeValue(it)||0),0)}

function finalizeTrade(){const a1IsRandom=trade.acc1==='__random',a2IsRandom=trade.acc2==='__random';const a1=a1IsRandom?null:accounts.find(x=>x.id===trade.acc1);const a2=a2IsRandom?null:accounts.find(x=>x.id===trade.acc2);if(!a1&&!a2)return alert('Accounts missing');
 // transfer offers: for eggs, merge stacks; for pets (instances), transfer directly
 function transferOffers(fromOffers,toAcc,fromAccId){fromOffers.forEach(o=>{if(o.itemType==='egg'){const existing=toAcc.inventory.find(i=>i.itemType==='egg'&&i.baseEggId===o.baseEggId);if(existing){existing.qty=(existing.qty||0)+o.qty;}else{const inst={instanceId:uid('egg'),itemType:'egg',baseEggId:o.baseEggId,name:o.name,baseName:o.baseName,qty:o.qty,tradeValue:Number(o.tradeValue||0),description:o.description||'',createdAt:Date.now()};toAcc.inventory.push(inst)}}else{ // pet instance or random pet
 const newInst=Object.assign({},o); // if random, __randomSource might be present
 newInst.instanceId=uid('inst');delete newInst.__randomSource;newInst.origin=null;toAcc.inventory.push(newInst)} }); }
 if(!a1IsRandom&&!a2IsRandom){transferOffers(trade.offers1,a2,trade.acc1);transferOffers(trade.offers2,a1,trade.acc2);save(S_ACCTS,accounts);alert('Trade complete!');trade={acc1:null,acc2:null,offers1:[],offers2:[]};render();return}
 // trades with Random: for items coming from random, convert to real instances and add to real account
 if(!a1IsRandom&&a2IsRandom){ // take a1 offers away (they already were removed from inventory when added), and generate new instances for random side offers into a1
 transferOffers(trade.offers2,a1,trade.acc2);save(S_ACCTS,accounts);alert('Trade with Random complete!');trade={acc1:null,acc2:null,offers1:[],offers2:[]};render();return}
 if(a1IsRandom&&!a2IsRandom){transferOffers(trade.offers1,a2,trade.acc1);save(S_ACCTS,accounts);alert('Trade with Random complete!');trade={acc1:null,acc2:null,offers1:[],offers2:[]};render();return}
}

function cancelTrade(){// return all offers back to their origin accounts
 trade.offers1.forEach((it)=>{if(it.itemType==='egg'){const acc=accounts.find(a=>a.id===it.origin);if(acc){const existing=acc.inventory.find(i=>i.itemType==='egg'&&i.baseEggId===it.baseEggId);if(existing)existing.qty=(existing.qty||0)+it.qty;else acc.inventory.push({instanceId:uid('egg'),itemType:'egg',baseEggId:it.baseEggId,name:it.name,baseName:it.baseName,qty:it.qty,tradeValue:it.tradeValue,description:it.description,createdAt:Date.now()})} }else{const acc=accounts.find(a=>a.id===it.origin);if(acc)acc.inventory.push(it)} });
 trade.offers2.forEach((it)=>{if(it.itemType==='egg'){const acc=accounts.find(a=>a.id===it.origin);if(acc){const existing=acc.inventory.find(i=>i.itemType==='egg'&&i.baseEggId===it.baseEggId);if(existing)existing.qty=(existing.qty||0)+it.qty;else acc.inventory.push({instanceId:uid('egg'),itemType:'egg',baseEggId:it.baseEggId,name:it.name,baseName:it.baseName,qty:it.qty,tradeValue:it.tradeValue,description:it.description,createdAt:Date.now()})} }else{const acc=accounts.find(a=>a.id===it.origin);if(acc)acc.inventory.push(it)} });
 save(S_ACCTS,accounts);trade={acc1:null,acc2:null,offers1:[],offers2:[]};}

// --- List mode and give functions preserved (unchanged) ---
function renderListMode(){L.innerHTML='';R.innerHTML='';L.appendChild(Object.assign(document.createElement('h3'),{textContent:'List Mode'}));const list=document.createElement('div');list.className='scroll-list';if(!eggs.length)list.innerHTML='<div class="muted">No eggs created yet.</div>';eggs.forEach(egg=>{const el=document.createElement('div');el.className='egg-item row';el.style.justifyContent='space-between';el.style.cursor='pointer';el.innerHTML=`<div style="flex:1"><strong>${esc(egg.name)}</strong><div class="small muted">Price: ${formatPrice(egg)} â€” Pets: ${egg.pets.length} â€” Trade value: ${Number(egg.tradeValue||0).toFixed(2)}</div></div>`;el.addEventListener('click',()=>{showEggListModal(egg)});list.appendChild(el)});L.appendChild(list);R.innerHTML='<div class="muted">Select an egg on the left to view its pets or give the egg item.</div>'}
function showEggListModal(egg){const cont=document.createElement('div');cont.innerHTML=`<h3>${esc(egg.name)}</h3><div class="small muted">Price: ${formatPrice(egg)} â€” Pets: ${egg.pets.length} â€” Trade value: ${Number(egg.tradeValue||0)}</div>`;
 const giveWrap=document.createElement('div');giveWrap.style.marginTop='8px';giveWrap.appendChild(Object.assign(document.createElement('label'),{textContent:'Give egg item (amount)'}));const amountIn=document.createElement('input');amountIn.type='number';amountIn.value=1;amountIn.min=1;amountIn.style.width='120px';giveWrap.appendChild(amountIn);giveWrap.appendChild(document.createElement('br'));const accSelect=document.createElement('select');accSelect.innerHTML='<option value="">-- Select account --</option>'+accounts.map(a=>`<option value="${a.id}">${esc(a.name)}</option>`).join('');giveWrap.appendChild(Object.assign(document.createElement('label'),{textContent:'Choose account to give to'}));giveWrap.appendChild(accSelect);giveWrap.appendChild(document.createElement('br'));
 giveWrap.appendChild(btn('Give egg item','primary',()=>{const accId=accSelect.value;if(!accId)return alert('Pick an account');const acc=accounts.find(x=>x.id===accId);if(!acc)return alert('Account not found');const amt=Number(amountIn.value)||0;if(amt<=0)return alert('Enter amount');const existing=acc.inventory.find(i=>i.itemType==='egg'&&i.baseEggId===egg.id);if(existing){existing.qty=(existing.qty||1)+amt;}else{const inst={instanceId:uid('egg'),itemType:'egg',baseEggId:egg.id,name:egg.name,baseName:egg.name,qty:amt,tradeValue:Number(egg.tradeValue||0),description:egg.description||'',createdAt:Date.now()};acc.inventory.push(inst)}save(S_ACCTS,accounts);closeModal();render();alert(`Gave ${amt} x ${egg.name} to ${acc.name}`)}));cont.appendChild(giveWrap);
 if(!egg.pets||!egg.pets.length){cont.appendChild(document.createElement('div')).innerHTML='<div class="muted">No pets in this egg</div>';openModal('Egg: '+egg.name,[cont]);return}egg.pets.forEach(p=>{const box=document.createElement('div');box.style.border='1px solid #eee';box.style.padding='8px';box.style.margin='6px 0';const title=document.createElement('div');title.innerHTML=`<strong>${esc(p.name)}</strong> <span class="small">(${esc(p.rarityText)} â€” ${p.rarityPct||0}%)</span>`;const info=document.createElement('div');info.className='small muted';info.innerHTML=`Weight: ${p.weightMin}kg - ${p.weightMax}kg â€¢ Money/tap: ${p.moneyPerTap} â€¢ Gold%: ${p.goldPct||0} â€¢ Rainbow%: ${p.rainbowPct||0}`;const vals=document.createElement('div');vals.className='small';vals.textContent=`Values: Regular ${Number(p.valueRegular||0)} / Gold ${Number(p.valueGold||0)} / Rainbow ${Number(p.valueRainbow||0)}`;const row=document.createElement('div');row.className='row';row.style.marginTop='6px';row.appendChild(btn('Give pet','primary',()=>{openGivePetModal(p,egg)}));row.appendChild(btn('Details','',()=>{const d=document.createElement('div');d.innerHTML=`<h4>${esc(p.name)}</h4><div class="small muted">Rarity: ${p.rarityText} â€” ${p.rarityPct||0}%</div><div class="small muted">Weight: ${p.weightMin}kg - ${p.weightMax}kg</div><div class="small muted">Money/tap: ${p.moneyPerTap}</div><div class="small muted">Gold chance: ${p.goldPct||0}% â€” Value: ${Number(p.valueGold||0)}</div><div class="small muted">Rainbow chance: ${p.rainbowPct||0}% â€” Value: ${Number(p.valueRainbow||0)}</div><div class="small muted">Regular value: ${Number(p.valueRegular||0)}</div><div style="margin-top:6px">${esc(p.description||'')}</div>`;openModal('Pet details',[d])}));box.appendChild(title);box.appendChild(info);box.appendChild(vals);box.appendChild(row);cont.appendChild(box)});openModal('Egg: '+egg.name,[cont])}
function openGivePetModal(p,egg){const cont=document.createElement('div');cont.innerHTML=`<h4>Give: ${esc(p.name)}</h4>`;const varSelect=document.createElement('select');varSelect.innerHTML=`<option value="regular">Regular</option><option value="gold">Gold</option><option value="rainbow">Rainbow</option>`;cont.appendChild(Object.assign(document.createElement('label'),{textContent:'Variant to give'}));cont.appendChild(varSelect);cont.appendChild(document.createElement('br'));const accSelect=document.createElement('select');accSelect.innerHTML='<option value="">-- Select account --</option>'+accounts.map(a=>`<option value="${a.id}">${esc(a.name)}</option>`).join('');cont.appendChild(Object.assign(document.createElement('label'),{textContent:'Choose account'}));cont.appendChild(accSelect);cont.appendChild(document.createElement('br'));cont.appendChild(btn('Give pet','primary',()=>{const accId=accSelect.value;if(!accId)return alert('Pick an account');const acc=accounts.find(x=>x.id===accId);if(!acc)return alert('Account not found');const variant=varSelect.value==='regular'?null:(varSelect.value==='gold'?'gold':'rainbow');givePetToAccount(p,variant,acc);save(S_ACCTS,accounts);closeModal();render();alert(`Gave ${p.name} (${variant||'regular'}) to ${acc.name}`)}));cont.appendChild(btn('Cancel','',()=>closeModal()));openModal('Give pet',[cont])}
function givePetToAccount(basePet,variant,account){const weight=+((basePet.weightMin)+Math.random()*(Math.max(0,basePet.weightMax-basePet.weightMin))).toFixed(2);const instanceName=basePet.name+(variant?(' ('+variant+')'):'');const variantMultiplier=variant==='gold'?2:(variant==='rainbow'?5:1);const inst={instanceId:uid('inst'),basePetId:basePet.id,name:instanceName,baseName:basePet.name,variant:variant,variantMultiplier:variantMultiplier,rarityText:basePet.rarityText,rarityPct:basePet.rarityPct,description:basePet.description,weight:weight,weightMin:basePet.weightMin,weightMax:basePet.weightMax,moneyPerTap:basePet.moneyPerTap,valueRegular:Number(basePet.valueRegular||0),valueGold:Number(basePet.valueGold||0),valueRainbow:Number(basePet.valueRainbow||0),createdAt:Date.now()};account.inventory.push(inst)}

bCreate.addEventListener('click',()=>{mode='create';render()});bPlay.addEventListener('click',()=>{mode='play';render()});bTrade.addEventListener('click',()=>{mode='trade';render()});bList.addEventListener('click',()=>{mode='list';render()});bExport.addEventListener('click',exportData);bImport.addEventListener('click',openImportModal);render();
</script>
</body></html>
