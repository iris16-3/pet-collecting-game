<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Pet Collector — Create & Play</title>
<style>
:root{--bg:#fff;--muted:#666;--accent:#0b67ff}
*{box-sizing:border-box}
html,body{height:100%;margin:0}
body{font-family:Inter,system-ui,Segoe UI,Roboto,sans-serif;background:var(--bg);padding:18px;color:#111;overflow-x:hidden}
header{display:flex;gap:8px;align-items:center;margin-bottom:14px}
h1{font-size:18px;margin:0}
.btn{padding:6px 10px;border-radius:8px;border:1px solid #ccc;background:#f5f5f5;cursor:pointer}
.btn.primary{background:var(--accent);color:#fff;border:0}
main{max-width:1200px;margin:0 auto}
.container{display:grid;grid-template-columns:360px 1fr;gap:16px}
.card{border:1px solid #ddd;border-radius:8px;padding:12px;background:#fff}
label{display:block;font-size:13px;margin:6px 0;color:var(--muted)}
.small{font-size:12px;color:var(--muted)}.muted{color:var(--muted)}.row{display:flex;gap:6px;align-items:center}
.inv-item,.egg-item,.pet-item,.acct-item{border:1px dashed #ccc;padding:6px;border-radius:6px;margin:4px 0;background:#fbfbff}
.trade-grid{display:grid;grid-template-columns:repeat(3,1fr);gap:4px;margin-top:6px}
.trade-slot{border:1px dashed #ccc;height:60px;display:flex;align-items:center;justify-content:center;border-radius:6px;cursor:pointer;background:#fafafa}
.trade-slot.filled{background:#eaf3ff;font-weight:600}
#modal{position:fixed;inset:0;background:rgba(0,0,0,.5);display:none;align-items:center;justify-content:center;padding:18px}
#modal>div{background:#fff;padding:12px;border-radius:8px;max-width:900px;width:100%;max-height:85%;overflow:auto}
.inv-grid{display:block;gap:8px;max-height:260px;overflow:auto;padding:6px}
.inv-card{border:1px solid #e6e6e6;border-radius:10px;padding:10px;background:#fbfbff;display:flex;flex-direction:row;align-items:center;justify-content:space-between;gap:12px;margin-bottom:8px}
.shop-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:10px}
.shop-card{border:1px solid #e6e6e6;border-radius:10px;padding:10px;background:#fff;display:flex;flex-direction:column;gap:8px;min-height:120px}
.pet-line{font-size:13px;color:var(--muted)}
.visibility-badge{font-size:12px;padding:4px 8px;border-radius:999px;border:1px solid #ddd}
.trade-total{font-weight:700;padding:6px 8px;border-radius:8px;background:#f1f7ff;border:1px solid #ddd}
.net-diff{font-weight:700;padding:6px 8px;border-radius:8px;background:#fff;border:1px solid #eee;margin-bottom:8px}
.net-pos{color:green;font-weight:700}
.net-neg{color:red;font-weight:700}
.json-textarea{width:100%;height:220px;border:1px solid #ddd;padding:8px;border-radius:6px}
.group-header{font-weight:700;margin-top:8px;margin-bottom:6px}
.group-list{display:flex;flex-direction:column;gap:6px}
.disabled-item{opacity:0.5;cursor:not-allowed}
@media (max-width:900px){
  .container{grid-template-columns:1fr}
  header .row{flex-wrap:wrap}
  .trade-grid{grid-template-columns:repeat(3,1fr);gap:6px}
}
</style>
</head>
<body>
<header>
  <h1>Pet Collector</h1>
  <div class="row" style="margin-left:auto">
    <button id="bCreate" class="btn">Create</button>
    <button id="bPlay" class="btn">Play</button>
    <button id="bList" class="btn">List</button>
    <button id="bTrade" class="btn">Trade</button>
    <button id="bExport" class="btn">Export</button>
    <button id="bImport" class="btn">Import</button>
  </div>
</header>
<main class="container"><section class="card" id="L"></section><section class="card" id="R"></section></main>
<div id="modal"><div><h3 id="modalTitle"></h3><div id="modalBody"></div><div class="row" style="justify-content:end;margin-top:8px"><button id="modalClose" class="btn">Cancel</button></div></div></div>
<script>
const S_EGGS='petgame_eggs', S_ACCTS='petgame_accounts';
const L=document.getElementById('L'), R=document.getElementById('R');
const bCreate=document.getElementById('bCreate'), bPlay=document.getElementById('bPlay'), bTrade=document.getElementById('bTrade'), bList=document.getElementById('bList');
const bExport=document.getElementById('bExport'), bImport=document.getElementById('bImport');
const M=document.getElementById('modal'), MT=document.getElementById('modalTitle'), MB=document.getElementById('modalBody'), MClose=document.getElementById('modalClose');
const load=k=>{try{return JSON.parse(localStorage.getItem(k)||'[]')}catch{return[]}}; // old data tolerant
const save=(k,v)=>localStorage.setItem(k,JSON.stringify(v));
let eggs=load(S_EGGS), accounts=load(S_ACCTS), mode='create', selectedEggId=null, selectedAccountId=null;
let trade={acc1:null,acc2:null,slots1:Array(9).fill(null),slots2:Array(9).fill(null)}, inventoryScroll={};
const uid=(p='id')=>p+'_'+Date.now().toString(36)+'_'+Math.floor(Math.random()*9000);
const esc=s=>s?String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;'):'', btn=(t,c,f)=>{const b=document.createElement('button');b.className='btn '+(c||'');b.textContent=t;b.addEventListener('click',f);return b};
const openModal=(title,nodes)=>{MT.textContent=title;MB.innerHTML='';nodes.forEach(n=>MB.appendChild(n));M.style.display='flex'}; 
const closeModal=()=>{M.style.display='none';MB.innerHTML=''};MClose.addEventListener('click',closeModal);

// Normalize loaded data: set defaults for fields added later
function normalizeData(){
  if(!Array.isArray(eggs)) eggs=[];
  if(!Array.isArray(accounts)) accounts=[];
  eggs.forEach(e=>{
    if(e.visible===undefined) e.visible=true;
    if(!e.pets) e.pets=[];
    if(!e.currency) e.currency='c'; // 'c' = coins, 's' = stars
  });
  accounts.forEach(a=>{
    if(a.stars===undefined) a.stars=0;
    if(!a.inventory) a.inventory=[];
    // ensure numeric money
    a.money = Number(a.money) || 0;
  });
}
normalizeData();

// Helper: gather all base pets across eggs
function getAllBasePets(){
  const list=[];
  eggs.forEach(egg=>{(egg.pets||[]).forEach(p=>{list.push(p)})});
  return list;
}

function formatPrice(egg){
  return `${egg.price}${egg.currency==='s'?'s':'c'}`;
}

function exportData(){const payload={eggs,accounts,exportedAt:Date.now()};const json=JSON.stringify(payload,null,2);const blob=new Blob([json],{type:'application/json'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download='petgame_data_'+(new Date()).toISOString().replace(/[:.]/g,'-')+'.json';document.body.appendChild(a);a.click();a.remove();URL.revokeObjectURL(url);const cont=document.createElement('div');const ta=document.createElement('textarea');ta.className='json-textarea';ta.value=json;const copyBtn=btn('Copy JSON','',()=>{ta.select();document.execCommand('copy');alert('JSON copied')});cont.appendChild(ta);cont.appendChild(document.createElement('br'));cont.appendChild(copyBtn);openModal('Exported data', [cont])}
function openImportModal(){const cont=document.createElement('div');const ta=document.createElement('textarea');ta.className='json-textarea';ta.placeholder='Paste exported JSON...';const imp=btn('Import JSON','primary',()=>{const raw=ta.value.trim();if(!raw)return alert('Paste JSON');try{const parsed=JSON.parse(raw);if(parsed.eggs&&parsed.accounts){eggs=parsed.eggs;accounts=parsed.accounts;normalizeData();save(S_EGGS,eggs);save(S_ACCTS,accounts);closeModal();render();alert('Import OK')}else{if(confirm('Missing top-level eggs/accounts. Try best-effort import?')){if(Array.isArray(parsed)){eggs=parsed;normalizeData();save(S_EGGS,eggs);closeModal();render();alert('Imported into eggs (best-effort)')}else alert('Invalid structure')}}}catch(e){alert('Invalid JSON: '+e.message)}});cont.appendChild(ta);cont.appendChild(document.createElement('br'));cont.appendChild(imp);openModal('Import data', [cont])}

function render(){bCreate.classList.toggle('primary',mode==='create');bPlay.classList.toggle('primary',mode==='play');bList.classList.toggle('primary',mode==='list');bTrade.classList.toggle('primary',mode==='trade');if(mode==='create')renderCreate();else if(mode==='play')renderPlay();else if(mode==='trade')renderTrade();else renderListMode()}

function renderCreate(){L.innerHTML='';R.innerHTML='';
  L.appendChild(Object.assign(document.createElement('h3'),{textContent:'Create Mode'}));
  const lbl=document.createElement('label');lbl.textContent='Egg name';const nameIn=document.createElement('input');nameIn.placeholder='Mystic Egg';
  const lp=document.createElement('label');lp.textContent='Egg price (coins or stars)';const priceIn=document.createElement('input');priceIn.type='number';priceIn.value=100;
  const currencySelect=document.createElement('select');currencySelect.innerHTML='<option value="c">Coins</option><option value="s">Stars</option>';
  L.appendChild(lbl);L.appendChild(nameIn);L.appendChild(lp);L.appendChild(priceIn);L.appendChild(Object.assign(document.createElement('label'),{textContent:'Currency'}));L.appendChild(currencySelect);
  const r=document.createElement('div');r.className='row';r.style.marginTop='8px';
  r.appendChild(btn('Add Egg','primary',()=>{const name=nameIn.value.trim(),price=Number(priceIn.value)||0,curr=currencySelect.value;if(!name)return alert('Enter egg name');const e={id:uid('egg'),name,price,currency:curr,pets:[],visible:true};eggs.push(e);save(S_EGGS,eggs);selectedEggId=e.id;render()}));
  r.appendChild(btn('Export eggs JSON','',()=>{prompt('Eggs JSON',JSON.stringify(eggs,null,2))}));
  L.appendChild(r);

  L.appendChild(Object.assign(document.createElement('h4'),{textContent:'Your Eggs'}));
  const list=document.createElement('div');if(!eggs.length)list.innerHTML='<div class="muted">No eggs yet.</div>';else eggs.forEach(egg=>{if(egg.visible===undefined)egg.visible=true;const el=document.createElement('div');el.className='egg-item row';el.style.justifyContent='space-between';const left=document.createElement('div');left.style.flex='1';left.innerHTML=`<strong>${esc(egg.name)}</strong><div class="small">Price: ${formatPrice(egg)} — Pets: ${egg.pets.length}</div>`;const ctr=document.createElement('div');ctr.className='row';ctr.appendChild(btn('Edit','',()=>{selectedEggId=egg.id;render()}));ctr.appendChild(btn('Delete','',()=>{if(confirm('Delete egg and pets?')){eggs=eggs.filter(e=>e.id!==egg.id);save(S_EGGS,eggs);if(selectedEggId===egg.id)selectedEggId=null;render()}}));ctr.appendChild(btn(egg.visible?'Visible':'Hidden','',()=>{egg.visible=!egg.visible;save(S_EGGS,eggs);render()}));el.appendChild(left);el.appendChild(ctr);list.appendChild(el)});
  L.appendChild(list);

  if(selectedEggId){const egg=eggs.find(e=>e.id===selectedEggId);if(egg)renderEggEditor(egg);else{selectedEggId=null;R.innerHTML='<div class="muted">Select an egg</div>'}}else R.innerHTML='<div class="muted">Select an egg to edit</div>'
}

function renderEggEditor(egg){R.innerHTML='';R.appendChild(Object.assign(document.createElement('h3'),{textContent:'Editing: '+egg.name}));
  const lp=document.createElement('label');lp.textContent='Egg price';const inPrice=document.createElement('input');inPrice.type='number';inPrice.value=egg.price;R.appendChild(lp);R.appendChild(inPrice);
  const curSelect=document.createElement('select');curSelect.innerHTML='<option value="c">Coins</option><option value="s">Stars</option>';curSelect.value=egg.currency||'c';
  R.appendChild(Object.assign(document.createElement('label'),{textContent:'Currency (c = coins, s = stars)'}));R.appendChild(curSelect);

  const vr=document.createElement('div');vr.className='row';vr.style.marginTop='6px';const vl=document.createElement('label');vl.textContent='Visible in shop';vr.appendChild(vl);vr.appendChild(btn(egg.visible?'Visible':'Hidden','',()=>{egg.visible=!egg.visible;save(S_EGGS,eggs);render()}));R.appendChild(vr);
  const rr=document.createElement('div');rr.className='row';rr.style.marginTop='8px';rr.appendChild(btn('Save Egg','primary',()=>{egg.price=Number(inPrice.value)||0;egg.currency=curSelect.value||'c';save(S_EGGS,eggs);render()}));rr.appendChild(btn('Back to eggs','',()=>{selectedEggId=null;render()}));R.appendChild(rr);

  R.appendChild(Object.assign(document.createElement('h4'),{textContent:"Pets in this egg (order doesn't matter)"}));
  const petList=document.createElement('div');if(!egg.pets||!egg.pets.length)petList.innerHTML='<div class="muted">No pets yet.</div>';else egg.pets.forEach(p=>{const d=document.createElement('div');d.className='pet-item';d.innerHTML=`<div style="display:flex;gap:8px;align-items:center"><div style="flex:1"><strong>${esc(p.name)}</strong> <span class="small">(${esc(p.rarityText)} — ${p.rarityPct}%)</span><div class="small muted">Weight: ${p.weightMin}kg - ${p.weightMax}kg • Money/tap: ${p.moneyPerTap}</div><div class="small">Values: ${Number(p.valueRegular||0)} / G:${Number(p.valueGold||0)} / R:${Number(p.valueRainbow||0)}</div><div class="small">${esc(p.description||'')}</div></div></div>`;const ctr=document.createElement('div');ctr.className='inline-controls';ctr.appendChild(btn('Edit','',()=>showPetEditModal(egg,p)));ctr.appendChild(btn('Delete','',()=>{if(confirm('Delete this pet?')){egg.pets=egg.pets.filter(x=>x.id!==p.id);save(S_EGGS,eggs);render()}}));d.appendChild(ctr);petList.appendChild(d)});R.appendChild(petList);

  R.appendChild(Object.assign(document.createElement('h4'),{textContent:'Add a new Pet'}));
  const f={};
  f.name=document.createElement('input');f.name.placeholder='Pet name';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Name'}));R.appendChild(f.name);
  f.rtext=document.createElement('input');f.rtext.placeholder='Rarity text';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Rarity text'}));R.appendChild(f.rtext);
  f.rpct=document.createElement('input');f.rpct.type='number';f.rpct.placeholder='Rarity %';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Rarity percentage (0-100)'}));R.appendChild(f.rpct);
  f.desc=document.createElement('textarea');f.desc.placeholder='A short description';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Description'}));R.appendChild(f.desc);
  f.wmin=document.createElement('input');f.wmin.type='number';f.wmin.step='0.1';f.wmin.placeholder='Weight min';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Weight min (kg)'}));R.appendChild(f.wmin);
  f.wmax=document.createElement('input');f.wmax.type='number';f.wmax.step='0.1';f.wmax.placeholder='Weight max';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Weight max (kg)'}));R.appendChild(f.wmax);
  f.mpt=document.createElement('input');f.mpt.type='number';f.mpt.step='0.01';f.mpt.placeholder='Money per tap';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Money earn per tap (baseline)'}));R.appendChild(f.mpt);
  f.gold=document.createElement('input');f.gold.type='number';f.gold.placeholder='Gold chance %';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Gold chance (%)'}));R.appendChild(f.gold);
  f.rainbow=document.createElement('input');f.rainbow.type='number';f.rainbow.placeholder='Rainbow chance %';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Rainbow chance (%)'}));R.appendChild(f.rainbow);
  f.valReg=document.createElement('input');f.valReg.type='number';f.valReg.step='0.01';f.valReg.placeholder='Regular value';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Regular trade value'}));R.appendChild(f.valReg);
  f.valGold=document.createElement('input');f.valGold.type='number';f.valGold.step='0.01';f.valGold.placeholder='Gold value';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Gold trade value'}));R.appendChild(f.valGold);
  f.valRainbow=document.createElement('input');f.valRainbow.type='number';f.valRainbow.step='0.01';f.valRainbow.placeholder='Rainbow value';R.appendChild(Object.assign(document.createElement('label'),{textContent:'Rainbow trade value'}));R.appendChild(f.valRainbow);

  R.appendChild(btn('Add Pet','primary',()=>{const name=f.name.value.trim();const rtext=f.rtext.value.trim()||'Common';const rpct=Number(f.rpct.value)||0;const descr=f.desc.value.trim();const wmin=Number(f.wmin.value)||0;const wmax=Number(f.wmax.value)||0;const mpt=Number(f.mpt.value)||0;const goldPct=Number(f.gold.value)||0;const rainbowPct=Number(f.rainbow.value)||0;const valueRegular=Number(f.valReg.value)||0;const valueGold=Number(f.valGold.value)||0;const valueRainbow=Number(f.valRainbow.value)||0;if(!name)return alert('Enter pet name');if(wmax<wmin)return alert('Weight max must be >= min');const otherTotal=(egg.pets||[]).reduce((s,p)=>s+(p.rarityPct||0),0);if(otherTotal+rpct>100){if(!confirm('Total rarity % will exceed 100%. Continue?'))return}const p={id:uid('pet'),name,rarityText:rtext,rarityPct:rpct,description:descr,weightMin:wmin,weightMax:wmax,moneyPerTap:mpt,goldPct:goldPct,rainbowPct:rainbowPct,valueRegular:valueRegular,valueGold:valueGold,valueRainbow:valueRainbow};egg.pets.push(p);save(S_EGGS,eggs);render()}));
}

function showPetEditModal(egg,pet){
  const cont=document.createElement('div');cont.innerHTML='<h4>Edit Pet</h4>';
  const inName=document.createElement('input');inName.value=pet.name;cont.appendChild(document.createTextNode('Name'));cont.appendChild(inName);cont.appendChild(document.createElement('br'));
  const inRtext=document.createElement('input');inRtext.value=pet.rarityText;cont.appendChild(document.createTextNode('Rarity text'));cont.appendChild(inRtext);cont.appendChild(document.createElement('br'));
  const inRp=document.createElement('input');inRp.type='number';inRp.value=pet.rarityPct;cont.appendChild(document.createTextNode('Rarity %'));cont.appendChild(inRp);cont.appendChild(document.createElement('br'));
  const inDesc=document.createElement('textarea');inDesc.value=pet.description;cont.appendChild(document.createTextNode('Description'));cont.appendChild(inDesc);cont.appendChild(document.createElement('br'));
  const inWmin=document.createElement('input');inWmin.type='number';inWmin.step='0.1';inWmin.value=pet.weightMin;cont.appendChild(document.createTextNode('Weight min'));cont.appendChild(inWmin);cont.appendChild(document.createElement('br'));
  const inWmax=document.createElement('input');inWmax.type='number';inWmax.step='0.1';inWmax.value=pet.weightMax;cont.appendChild(document.createTextNode('Weight max'));cont.appendChild(inWmax);cont.appendChild(document.createElement('br'));
  const inMpt=document.createElement('input');inMpt.type='number';inMpt.step='0.01';inMpt.value=pet.moneyPerTap;cont.appendChild(document.createTextNode('Money per tap'));cont.appendChild(inMpt);cont.appendChild(document.createElement('br'));
  const inGold=document.createElement('input');inGold.type='number';inGold.value=pet.goldPct||0;cont.appendChild(document.createTextNode('Gold chance (%)'));cont.appendChild(inGold);cont.appendChild(document.createElement('br'));
  const inRainbow=document.createElement('input');inRainbow.type='number';inRainbow.value=pet.rainbowPct||0;cont.appendChild(document.createTextNode('Rainbow chance (%)'));cont.appendChild(inRainbow);cont.appendChild(document.createElement('br'));
  const inValReg=document.createElement('input');inValReg.type='number';inValReg.step='0.01';inValReg.value=pet.valueRegular||0;cont.appendChild(document.createTextNode('Regular trade value'));cont.appendChild(inValReg);cont.appendChild(document.createElement('br'));
  const inValGold=document.createElement('input');inValGold.type='number';inValGold.step='0.01';inValGold.value=pet.valueGold||0;cont.appendChild(document.createTextNode('Gold trade value'));cont.appendChild(inValGold);cont.appendChild(document.createElement('br'));
  const inValRainbow=document.createElement('input');inValRainbow.type='number';inValRainbow.step='0.01';inValRainbow.value=pet.valueRainbow||0;cont.appendChild(document.createTextNode('Rainbow trade value'));cont.appendChild(inValRainbow);cont.appendChild(document.createElement('br'));

  cont.appendChild(btn('Save Pet','primary',()=>{
    // save changes to template pet
    pet.name=inName.value.trim()||pet.name;
    pet.rarityText=inRtext.value.trim()||pet.rarityText;
    pet.rarityPct=Number(inRp.value)||0;
    pet.description=inDesc.value.trim();
    pet.weightMin=Number(inWmin.value)||0;
    pet.weightMax=Number(inWmax.value)||0;
    pet.moneyPerTap=Number(inMpt.value)||0;
    pet.goldPct=Number(inGold.value)||0;
    pet.rainbowPct=Number(inRainbow.value)||0;
    pet.valueRegular=Number(inValReg.value)||0;
    pet.valueGold=Number(inValGold.value)||0;
    pet.valueRainbow=Number(inValRainbow.value)||0;

    // PROPAGATE changes to existing instances that were hatched from this base pet
    // We update instance fields so displays and trade values reflect changes.
    accounts.forEach(acc=>{
      if(!acc.inventory) return;
      acc.inventory.forEach(inst=>{
        if(inst.basePetId && inst.basePetId === pet.id){
          // keep variant suffix if present
          const variant = inst.variant; // 'gold' / 'rainbow' / null
          inst.baseName = pet.name;
          inst.rarityText = pet.rarityText;
          inst.rarityPct = pet.rarityPct;
          inst.description = pet.description;
          inst.weightMin = pet.weightMin;
          inst.weightMax = pet.weightMax;
          inst.moneyPerTap = pet.moneyPerTap;
          inst.valueRegular = Number(pet.valueRegular||0);
          inst.valueGold = Number(pet.valueGold||0);
          inst.valueRainbow = Number(pet.valueRainbow||0);
          // name: keep same variant suffix if present
          inst.name = pet.name + (variant?('('+variant+')'):'');
          // update variantMultiplier if variant matches
          inst.variantMultiplier = variant==='gold'?2:(variant==='rainbow'?5:1);
        }
      });
    });

    save(S_EGGS,eggs);
    save(S_ACCTS,accounts);
    closeModal();
    render();
  }));
  cont.appendChild(btn('Cancel','',()=>closeModal()));
  openModal('Edit Pet',[cont]);
}

function renderPlay(){L.innerHTML='';L.appendChild(Object.assign(document.createElement('h3'),{textContent:'Play Mode'}));
  const nameIn=document.createElement('input');nameIn.placeholder='Player name';
  const moneyIn=document.createElement('input');moneyIn.type='number';moneyIn.value=100;
  L.appendChild(Object.assign(document.createElement('label'),{textContent:'Create Save (Account) name'}));L.appendChild(nameIn);
  L.appendChild(Object.assign(document.createElement('label'),{textContent:'Starting money'}));L.appendChild(moneyIn);
  const r=document.createElement('div');r.className='row';r.style.marginTop='8px';
  r.appendChild(btn('Create Account','primary',()=>{const name=nameIn.value.trim();const money=Number(moneyIn.value)||0;if(!name)return alert('Enter an account name');const a={id:uid('acc'),name,money,stars:0,inventory:[],equippedPetId:null};accounts.push(a);save(S_ACCTS,accounts);selectedAccountId=a.id;render()}));
  r.appendChild(btn('Import accounts JSON','',()=>{const raw=prompt('Paste accounts JSON');try{const imp=JSON.parse(raw||'[]');accounts=imp;normalizeData();save(S_ACCTS,accounts);render()}catch(e){alert('Invalid JSON')}}));
  L.appendChild(r);

  L.appendChild(Object.assign(document.createElement('h4'),{textContent:'Your Accounts'}));
  const list=document.createElement('div');
  accounts.forEach(a=>{const totalPetValue = (a.inventory||[]).reduce((s,p)=>s+Number(getPetTradeValue(p)||0),0);const totalPetValueDisplay = Number(totalPetValue).toFixed(2);const d=document.createElement('div');d.className='acct-item row';if(a.id===selectedAccountId)d.style.outline='2px solid rgba(11,103,255,0.12)';d.innerHTML=`<div style="flex:1"><strong>${esc(a.name)}</strong><div class="small muted">Money: ${Number(a.money).toFixed(2)} • Pets: ${a.inventory.length} • Value: ${totalPetValueDisplay}</div></div>`;const ctr=document.createElement('div');ctr.className='row';ctr.appendChild(btn('Play','',()=>{selectedAccountId=a.id;render()}));ctr.appendChild(btn('Delete','',()=>{if(confirm('Delete this account?')){accounts=accounts.filter(x=>x.id!==a.id);save(S_ACCTS,accounts);if(selectedAccountId===a.id)selectedAccountId=null;render()}}));d.appendChild(ctr);list.appendChild(d)});
  L.appendChild(list);

  if(selectedAccountId){const acc=accounts.find(a=>a.id===selectedAccountId);if(acc)renderPlayArea(acc);else{selectedAccountId=null;R.innerHTML='<div class="muted">Select an account</div>'}}else R.innerHTML='<div class="muted">Select an account to play</div>'
}

function renderPlayArea(account){R.innerHTML='';
  const headerRow=document.createElement('div');headerRow.className='row';headerRow.style.justifyContent='space-between';
  const left=document.createElement('div');left.innerHTML=`<h3>Playing: ${esc(account.name)}</h3><div class="small muted">Coins: ${Number(account.money).toFixed(2)} • Stars: ${Number(account.stars||0)}</div>`;
  const right=document.createElement('div');right.className='row';
  right.appendChild(btn('Open Shop','primary',()=>openShopModal(account)));
  right.appendChild(btn('Earn Coins (tap)','',()=>{const earned=doEarn(account);if(earned<=0)alert('No pet equipped. Equip a pet to earn coins.');else{account.money+=earned;save(S_ACCTS,accounts);const cur=document.querySelector('.inv-grid');if(cur)inventoryScroll[account.id]=cur.scrollTop||0;render();alert('Earned '+earned.toFixed(2)+' coins')}}));
  headerRow.appendChild(left);headerRow.appendChild(right);
  R.appendChild(headerRow);

  // Money controls (still in Play mode)
  const moneyRow=document.createElement('div');moneyRow.className='row';
  const moneyInput=document.createElement('input');moneyInput.type='number';moneyInput.step='0.01';moneyInput.placeholder='Amount';moneyInput.style.width='120px';
  moneyRow.appendChild(moneyInput);
  moneyRow.appendChild(btn('Add Money','',()=>{const amt=Number(moneyInput.value)||0;if(amt===0)return;const cur=document.querySelector('.inv-grid');if(cur)inventoryScroll[account.id]=cur.scrollTop||0;account.money+=amt;save(S_ACCTS,accounts);render()}));
  moneyRow.appendChild(btn('Subtract Money','',()=>{const amt=Number(moneyInput.value)||0;if(amt===0)return;const cur=document.querySelector('.inv-grid');if(cur)inventoryScroll[account.id]=cur.scrollTop||0;account.money-=amt;save(S_ACCTS,accounts);render()}));
  R.appendChild(moneyRow);

  R.appendChild(Object.assign(document.createElement('h4'),{textContent:'Inventory'}));
  const invGrid=document.createElement('div');invGrid.className='inv-grid';

  // --- Grouped alphabetical inventory listing (like Quick Delete) ---
  if(!account.inventory||!account.inventory.length)invGrid.innerHTML='<div class="muted">No pets in inventory.</div>';
  else{
    const groups = {};
    account.inventory.forEach(p=>{
      const key = (p.baseName || (p.name||'')).toString() || 'Unknown';
      if(!groups[key]) groups[key]=[];
      groups[key].push(p);
    });
    const keys = Object.keys(groups).sort((a,b)=>a.toLowerCase().localeCompare(b.toLowerCase()));
    keys.forEach(k=>{
      const header = document.createElement('div'); header.className='group-header'; header.textContent = k; invGrid.appendChild(header);
      const list = document.createElement('div'); list.className='group-list';
      // sort instances: regular, gold, rainbow then weight desc
      groups[k].sort((a,b)=>{const order=v=>v===null?0:(v==='gold'?1:(v==='rainbow'?2:0));const oa=order(a.variant), ob=order(b.variant); if(oa!==ob) return oa-ob; return (Number(b.weight)||0) - (Number(a.weight)||0);});
      groups[k].forEach(p=>{
        const card=document.createElement('div');card.className='inv-card';
        // left side: name + subtitle inline
        const left=document.createElement('div'); left.style.flex='1'; left.style.display='flex'; left.style.flexDirection='column';
        const nameRow=document.createElement('div'); nameRow.style.display='flex'; nameRow.style.justifyContent='space-between'; nameRow.style.alignItems='center';
        const nameEl=document.createElement('div'); nameEl.innerHTML=`<strong>${esc(p.name)}</strong>`;
        const subEl=document.createElement('div'); subEl.className='small muted'; subEl.style.marginLeft='8px'; const wtext = (p.weight!==undefined&&p.weight!==null)?(Number(p.weight).toFixed(2)+'kg') : '';
        subEl.textContent = `${p.rarityText}${wtext?(' • '+wtext):''}`;
        nameRow.appendChild(nameEl); nameRow.appendChild(subEl);
        const desc=document.createElement('div'); desc.className='small'; desc.textContent = p.description||'';
        left.appendChild(nameRow); left.appendChild(desc);

        // right side: value and controls
        const right=document.createElement('div'); right.style.display='flex'; right.style.flexDirection='column'; right.style.alignItems='flex-end'; right.style.gap='6px';
        const value=document.createElement('div'); value.className='small muted'; value.textContent = 'Value: '+Number(getPetTradeValue(p)).toFixed(2);
        const ctr=document.createElement('div'); ctr.className='controls';
        ctr.appendChild(btn(account.equippedPetId===p.instanceId?'Equipped':'Equip','',()=>{account.equippedPetId=p.instanceId;save(S_ACCTS,accounts);render()}));
        ctr.appendChild(btn('Delete','',()=>{if(confirm('Delete this pet?')){account.inventory=account.inventory.filter(x=>x.instanceId!==p.instanceId);if(account.equippedPetId===p.instanceId)account.equippedPetId=null;save(S_ACCTS,accounts);render()}}));
        right.appendChild(value); right.appendChild(ctr);

        card.appendChild(left); card.appendChild(right); list.appendChild(card);
      });
      invGrid.appendChild(list);
    });
  }

  R.appendChild(invGrid);
  if(inventoryScroll[account.id])try{invGrid.scrollTop=inventoryScroll[account.id]}catch(e){}

  R.appendChild(Object.assign(document.createElement('h4'),{textContent:'Actions'}));
  R.appendChild(btn('Save Account','',()=>{save(S_ACCTS,accounts);alert('Saved')}));
  // --- NEW: Quick Delete button ---
  R.appendChild(btn('Quick Delete','',()=>{openQuickDeleteModal(account)}));
}

function openQuickDeleteModal(account){
  const cont=document.createElement('div');
  cont.innerHTML = `<h4>Quick delete pets from ${esc(account.name)}</h4>`;
  const listWrap = document.createElement('div'); listWrap.style.maxHeight='360px'; listWrap.style.overflow='auto'; listWrap.style.marginTop='8px';
  if(!account.inventory || !account.inventory.length){const empty=document.createElement('div');empty.className='muted';empty.textContent='No pets to delete.';listWrap.appendChild(empty);} else {
    // We will list pets in the same grouped alphabetical order as the inventory view
    const groups = {};
    account.inventory.forEach(p=>{
      const key = (p.baseName || (p.name||'')).toString();
      if(!groups[key]) groups[key]=[];
      groups[key].push(p);
    });
    const keys = Object.keys(groups).sort((a,b)=>a.toLowerCase().localeCompare(b.toLowerCase()));
    keys.forEach(k=>{
      const header = document.createElement('div'); header.style.fontWeight='700'; header.style.marginTop='8px'; header.textContent = k; listWrap.appendChild(header);
      groups[k].forEach(p=>{
        const row = document.createElement('label'); row.style.display='flex'; row.style.alignItems='center'; row.style.gap='8px'; row.style.border='1px solid #eee'; row.style.padding='6px'; row.style.borderRadius='6px'; row.style.marginTop='6px';
        const chk = document.createElement('input'); chk.type='checkbox'; chk.dataset.id = p.instanceId;
        const info = document.createElement('div'); info.style.flex='1'; info.innerHTML = `<strong>${esc(p.name)}</strong> <div class="small muted">${esc(p.rarityText)} • ${Number(p.weight||0).toFixed(2)}kg</div>`;
        const val = document.createElement('div'); val.className='small'; val.textContent = Number(getPetTradeValue(p)).toFixed(2);
        row.appendChild(chk); row.appendChild(info); row.appendChild(val);
        listWrap.appendChild(row);
      });
    });
  }
  cont.appendChild(listWrap);
  const footer = document.createElement('div'); footer.className='row'; footer.style.justifyContent='flex-end'; footer.style.gap='8px'; footer.style.marginTop='8px';
  const cancelBtn = btn('Cancel','',()=>closeModal());
  const deleteBtn = btn('Delete selected','primary',()=>{
    // collect checked ids
    const checks = MB.querySelectorAll('input[type="checkbox"][data-id]');
    const ids = [];
    checks.forEach(c=>{ if(c.checked) ids.push(c.dataset.id); });
    if(!ids.length) return alert('No pets selected');
    if(!confirm(`Delete ${ids.length} pet(s)? This cannot be undone.`)) return;
    account.inventory = account.inventory.filter(x=>!ids.includes(x.instanceId));
    if(account.equippedPetId && ids.includes(account.equippedPetId)) account.equippedPetId = null;
    save(S_ACCTS,accounts);
    closeModal();
    render();
    alert('Deleted '+ids.length+' pet(s)');
  });
  footer.appendChild(cancelBtn); footer.appendChild(deleteBtn); cont.appendChild(footer);
  openModal('Quick Delete',[cont]);
}

function openShopModal(account){
  const visibleEggs=eggs.filter(e=>e.visible===undefined?true:e.visible);
  const cont=document.createElement('div');
  // Top row: show coins and stars and allow adding/subtracting stars (stars controls only in shop)
  const topRow=document.createElement('div');topRow.className='row';topRow.style.justifyContent='space-between';topRow.style.marginBottom='8px';
  const left=document.createElement('div');left.innerHTML=`<strong>${esc(account.name)}</strong> <div class="small muted">Coins: ${Number(account.money).toFixed(2)} • Stars: ${Number(account.stars||0)}</div>`;
  const right=document.createElement('div');right.className='row';
  const starInput=document.createElement('input');starInput.type='number';starInput.placeholder='Stars';starInput.style.width='120px';
  right.appendChild(starInput);
  right.appendChild(btn('Add Stars','',()=>{const amt=Number(starInput.value)||0;if(amt===0)return;account.stars=(Number(account.stars)||0)+amt;save(S_ACCTS,accounts);render();openShopModal(account)}));
  right.appendChild(btn('Subtract Stars','',()=>{const amt=Number(starInput.value)||0;if(amt===0)return;if((Number(account.stars)||0) < amt) return alert('Not enough stars');account.stars=(Number(account.stars)||0)-amt;save(S_ACCTS,accounts);render();openShopModal(account)}));
  topRow.appendChild(left);topRow.appendChild(right);
  cont.appendChild(topRow);

  if(!visibleEggs.length){cont.innerHTML+='<div class="muted">No eggs available. Toggle in Create mode.</div>';openModal('Shop',[cont]);return}

  const grid=document.createElement('div');grid.className='shop-grid';
  visibleEggs.forEach(egg=>{
    const card=document.createElement('div');card.className='shop-card';
    card.appendChild(Object.assign(document.createElement('h4'),{textContent:`${egg.name} — ${formatPrice(egg)}`}));
    const vis=document.createElement('div');vis.className='visibility-badge';vis.textContent=egg.visible?'Visible':'Hidden';card.appendChild(vis);
    const petList=document.createElement('div');petList.style.flex='1';
    if(!egg.pets||!egg.pets.length)petList.innerHTML='<div class="muted">No pets</div>';else egg.pets.forEach(p=>{const pdiv=document.createElement('div');pdiv.className='pet-line';pdiv.textContent=`${p.name} — ${p.rarityText} — ${p.rarityPct||0}% — Value: ${Number(p.valueRegular||0)}`;petList.appendChild(pdiv)});
    card.appendChild(petList);
    const row=document.createElement('div');row.className='row';
    row.appendChild(btn('Buy','primary',()=>{
      // check currency
      const price = Number(egg.price)||0;
      if(egg.currency==='s'){
        if((Number(account.stars)||0) < price) return alert('Not enough stars');
        account.stars = (Number(account.stars)||0) - price;
      } else {
        if(account.money < price) return alert('Not enough coins');
        account.money -= price;
      }
      if(!egg.pets||!egg.pets.length){alert('This egg has no pets');return}
      const result=rollPetFromEgg(egg);
      const variant=determineVariant(result);
      const weight=+(result.weightMin+Math.random()*(result.weightMax-result.weightMin)).toFixed(2);
      const instanceName=result.name+(variant?(' ('+variant+')'):'');
      const valueRegular=Number(result.valueRegular||0);
      const valueGold=Number(result.valueGold||0);
      const valueRainbow=Number(result.valueRainbow||0);
      const variantMultiplier=variant==='gold'?2:variant==='rainbow'?5:1;
      const inst={instanceId:uid('inst'),basePetId:result.id,name:instanceName,baseName:result.name,variant:variant,variantMultiplier:variantMultiplier,rarityText:result.rarityText,rarityPct:result.rarityPct,description:result.description,weight:weight,weightMin:result.weightMin,weightMax:result.weightMax,moneyPerTap:result.moneyPerTap,valueRegular:valueRegular,valueGold:valueGold,valueRainbow:valueRainbow,createdAt:Date.now()};
      account.inventory.push(inst);
      save(S_ACCTS,accounts);
      // DO NOT close the shop — refresh modal so user can buy again instantly
      openShopModal(account);
      render();
      alert(`You got: ${inst.name} (${inst.rarityText}) — ${inst.weight}kg`);
    }));
    row.appendChild(btn('Details','',()=>{const d=document.createElement('div');d.innerHTML=`<h4>${esc(egg.name)}</h4><div class="small muted">Price: ${formatPrice(egg)}</div>`;const list=document.createElement('div');if(!egg.pets||!egg.pets.length)list.innerHTML='<div class="muted">No pets</div>';else egg.pets.forEach(p=>{const r=document.createElement('div');r.className='pet-line';r.textContent=`${p.name} — ${p.rarityText} — ${p.rarityPct||0}% — Value: ${Number(p.valueRegular||0)} / G:${Number(p.valueGold||0)} / R:${Number(p.valueRainbow||0)}`;list.appendChild(r)});d.appendChild(list);openModal('Egg details',[d])}));
    card.appendChild(row);grid.appendChild(card)
  });
  cont.appendChild(grid);openModal('Shop',[cont])
}

function rollPetFromEgg(egg){const total=egg.pets.reduce((s,p)=>s+(p.rarityPct||0),0);let roll=Math.random()*100;if(total<=0)return egg.pets[Math.floor(Math.random()*egg.pets.length)];for(let p of egg.pets){if(roll<p.rarityPct)return p;roll-=p.rarityPct}return egg.pets[Math.floor(Math.random()*egg.pets.length)]}
function determineVariant(basePet){if((basePet.rainbowPct||0)>0 && Math.random()*100<basePet.rainbowPct)return 'rainbow';if((basePet.goldPct||0)>0 && Math.random()*100<basePet.goldPct)return 'gold';return null}
function getPetTradeValue(p){if(!p)return 0; if(p.variant==='gold')return Number(p.valueGold||0); if(p.variant==='rainbow')return Number(p.valueRainbow||0); return Number(p.valueRegular||0)}
function doEarn(account){const pet=account.inventory.find(p=>p.instanceId===account.equippedPetId);if(!pet)return 0;const base=Number(pet.moneyPerTap)||0;const minW=Number(pet.weightMin)||0;const w=Number(pet.weight)||minW;const extraKgs=Math.floor(Math.max(0,w-minW));const weightMultiplier=1+(0.10*extraKgs);const variantMultiplier=Number(pet.variantMultiplier)||(pet.variant==='gold'?2:pet.variant==='rainbow'?5:1);return+(base*weightMultiplier*variantMultiplier).toFixed(2)
}

// ---------- New: Random trade helpers ----------
// Build a uniform list of (basePet, variant) possibilities, each treated equally
function buildUniformVariantPool(){
  const pool=[];
  const bases = getAllBasePets();
  bases.forEach(bp=>{
    // include regular
    pool.push({base:bp,variant:null});
    // include gold
    pool.push({base:bp,variant:'gold'});
    // include rainbow
    pool.push({base:bp,variant:'rainbow'});
  });
  return pool;
}

function makeRandomInstanceFromPoolItem(item){
  const base=item.base;
  const variant=item.variant;
  const weight = +((base.weightMin) + Math.random()*(Math.max(0,base.weightMax-base.weightMin))).toFixed(2);
  const name = base.name + (variant?(' ('+variant+')'):'');
  const variantMultiplier = variant==='gold'?2:(variant==='rainbow'?5:1);
  return {
    instanceId: uid('rand'),
    basePetId: base.id,
    name: name,
    baseName: base.name,
    variant: variant,
    variantMultiplier: variantMultiplier,
    rarityText: base.rarityText,
    rarityPct: base.rarityPct,
    description: base.description,
    weight: weight,
    weightMin: base.weightMin,
    weightMax: base.weightMax,
    moneyPerTap: base.moneyPerTap,
    valueRegular: Number(base.valueRegular||0),
    valueGold: Number(base.valueGold||0),
    valueRainbow: Number(base.valueRainbow||0),
    createdAt: Date.now(),
    // mark as a random-provided temporary instance so finalizeTrade can treat it specially
    __randomSource: true
  };
}

function generateRandomChoices(n){
  const pool = buildUniformVariantPool();
  if(pool.length===0) return [];
  const choices = [];
  const usedIdx = new Set();
  // pick up to n unique entries
  while(choices.length < n && usedIdx.size < pool.length){
    const idx = Math.floor(Math.random()*pool.length);
    if(usedIdx.has(idx)) continue;
    usedIdx.add(idx);
    choices.push(makeRandomInstanceFromPoolItem(pool[idx]));
  }
  return choices;
}

// ---------- end Random helpers ----------

function renderTrade(){L.innerHTML='';L.appendChild(Object.assign(document.createElement('h3'),{textContent:'Trading Mode'}));
  const sel1=document.createElement('select');sel1.id='tradeAcc1';sel1.innerHTML='<option value="">-- Select --</option>'+accounts.map(a=>`<option value="${a.id}">${esc(a.name)}</option>`).join('');
  const sel2=document.createElement('select');sel2.id='tradeAcc2';
  // Include the same options plus a RANDOM simulated entry (only visible in trade mode)
  sel2.innerHTML = '<option value="">-- Select --</option>' + accounts.map(a=>`<option value="${a.id}">${esc(a.name)}</option>`).join('') + '<option value="__random">Random (simulated)</option>';
  // also allow random on the first selector for convenience
  sel1.innerHTML = '<option value="">-- Select --</option>' + accounts.map(a=>`<option value="${a.id}">${esc(a.name)}</option>`).join('') + '<option value="__random">Random (simulated)</option>';
  L.appendChild(sel1);L.appendChild(sel2);L.appendChild(btn('Start Trade','primary',()=>startTrade()));R.innerHTML='<div class="muted">Choose two accounts and press Start Trade.</div>'}

function startTrade(){const sel1=document.getElementById('tradeAcc1'),sel2=document.getElementById('tradeAcc2');if(!sel1||!sel2)return alert('Trade selectors not found');
  const v1=sel1.value, v2=sel2.value;
  if(!v1||!v2) return alert('Choose two accounts (or Random).');
  if(v1===v2) return alert('Choose two different accounts');
  trade={acc1:v1,acc2:v2,slots1:Array(9).fill(null),slots2:Array(9).fill(null)};
  drawTradeArea()
}

function drawTradeArea(){
  const a1 = (trade.acc1==='__random')?null:accounts.find(x=>x.id===trade.acc1);
  const a2 = (trade.acc2==='__random')?null:accounts.find(x=>x.id===trade.acc2);
  const isRandom1 = trade.acc1==='__random';
  const isRandom2 = trade.acc2==='__random';
  // ensure at least one non-null account exists
  if(!a1 && !a2){renderTrade();return}
  const n1Name = isRandom1? 'Random (simulated)' : (a1?esc(a1.name):'Unknown');
  const n2Name = isRandom2? 'Random (simulated)' : (a2?esc(a2.name):'Unknown');
  L.innerHTML=`<h3>Trading: ${n1Name} ⇄ ${n2Name}</h3><div class="muted">Place pets in slots, then Finalize to complete the trade.</div>`;
  R.innerHTML='';
  const container=document.createElement('div');container.className='row';container.style.justifyContent='space-between';
  const left=document.createElement('div');left.style.flex='1';left.style.marginRight='8px';
  const total1=computeSlotsValue(trade.slots1),total2=computeSlotsValue(trade.slots2);const total1Display = Number(total1).toFixed(2);const total2Display = Number(total2).toFixed(2);
  // acc net: how much this account will gain (positive means receiving more)
  const acc1Net = Number((total2-total1).toFixed(2));
  const acc2Net = Number((total1-total2).toFixed(2));
  left.innerHTML=`<h4>${n1Name} <span class="small muted">— Offer value:</span> <span class="trade-total">${total1Display}</span> <span class="small">(<span class="${acc1Net>=0?"net-pos":"net-neg"}">${acc1Net>=0?"+"+acc1Net.toFixed(2):acc1Net.toFixed(2)}</span>)</span></h4>`;
  const grid1=document.createElement('div');grid1.className='trade-grid';left.appendChild(grid1);left.appendChild(btn('Accept','',()=>alert(n1Name+' accepted (client-side)')));left.appendChild(btn('Decline','',()=>{alert(n1Name+' declined');renderTrade()}));
  const right=document.createElement('div');right.style.flex='1';right.style.marginLeft='8px';right.innerHTML=`<h4>${n2Name} <span class="small muted">— Offer value:</span> <span class="trade-total">${total2Display}</span> <span class="small">(<span class="${acc2Net>=0?"net-pos":"net-neg"}">${acc2Net>=0?"+"+acc2Net.toFixed(2):acc2Net.toFixed(2)}</span>)</span></h4>`;
  const grid2=document.createElement('div');grid2.className='trade-grid';right.appendChild(grid2);right.appendChild(btn('Accept','',()=>alert(n2Name+' accepted (client-side)')));right.appendChild(btn('Decline','',()=>{alert(n2Name+' declined');renderTrade()}));
  container.appendChild(left);container.appendChild(right);R.appendChild(container);

  function drawGrid(gridEl,slots,acc,isRandomSide){
    gridEl.innerHTML='';
    slots.forEach((s,idx)=>{const d=document.createElement('div');d.className='trade-slot'+(s?' filled':'');d.textContent=s?s.name:'+';d.addEventListener('click',()=>{
      if(s){slots[idx]=null;drawTradeArea();return}
      // empty slot clicked
      if(isRandomSide){
        // Show 5 random choices + a 'Pick' option
        const used=(trade.slots1.concat(trade.slots2).filter(Boolean)).map(x=>x.instanceId);
        const container=document.createElement('div');
        container.innerHTML = `<div class="small muted">Choose from 5 random pets (variants included). Each open regenerates the list.</div>`;
        const choicesWrap=document.createElement('div');choicesWrap.style.display='grid';choicesWrap.style.gridTemplateColumns='repeat(1,1fr)';choicesWrap.style.gap='8px';choicesWrap.style.marginTop='8px';
        const choices = generateRandomChoices(5);
        choices.forEach(ch=>{
          const row=document.createElement('div'); row.className='inv-item'; row.style.display='flex'; row.style.justifyContent='space-between'; row.style.alignItems='center';
          row.innerHTML = `<div style="flex:1"><strong>${esc(ch.name)}</strong><div class="small muted">${esc(ch.rarityText)} • ${Number(ch.weight).toFixed(2)}kg • Value: ${Number(getPetTradeValue(ch)).toFixed(2)}</div></div>`;
          // disable if instanceId already used in trade
          const already = used.includes(ch.instanceId);
          if(already){ row.classList.add('disabled-item'); const note=document.createElement('div');note.className='small muted';note.textContent='Already in trade'; row.appendChild(note);} else {
            row.style.cursor='pointer'; row.addEventListener('click',()=>{slots[idx]=ch; closeModal(); drawTradeArea();});
          }
          choicesWrap.appendChild(row);
        });
        container.appendChild(choicesWrap);
        container.appendChild(document.createElement('hr'));
        const pickRow=document.createElement('div'); pickRow.className='row'; pickRow.style.justifyContent='flex-end';
        pickRow.appendChild(btn('Pick (choose any pet)','',()=>{closeModal(); openPickModalForRandomSlot(slots, idx)}));
        pickRow.appendChild(btn('Refresh list','',()=>{closeModal(); d.click()}));
        container.appendChild(pickRow);
        openModal('Random choices',[container]);
      } else {
        // normal account: show their inventory grouped, disabling already-in-trade items
        const used=(trade.slots1.concat(trade.slots2).filter(Boolean)).map(x=>x.instanceId);
        if(!acc.inventory||!acc.inventory.length) return alert('This account has no pets');
        const container=document.createElement('div');
        container.innerHTML = `<div class="small muted">Click a pet to add it to the slot. Pets already in the trade are disabled.</div>`;
        const listWrap = document.createElement('div'); listWrap.style.maxHeight='420px'; listWrap.style.overflow='auto'; listWrap.style.marginTop='8px';
        const groups = {};
        acc.inventory.forEach(p=>{const key = (p.baseName || (p.name||'')).toString() || 'Unknown'; if(!groups[key]) groups[key]=[]; groups[key].push(p);});
        const keys = Object.keys(groups).sort((a,b)=>a.toLowerCase().localeCompare(b.toLowerCase()));
        keys.forEach(k=>{
          const header = document.createElement('div'); header.className='group-header'; header.textContent = k; listWrap.appendChild(header);
          const groupList = document.createElement('div'); groupList.className='group-list';
          groups[k].sort((a,b)=>{const order=v=>v===null?0:(v==='gold'?1:(v==='rainbow'?2:0));const oa=order(a.variant), ob=order(b.variant); if(oa!==ob) return oa-ob; return (Number(b.weight)||0) - (Number(a.weight)||0);});
          groups[k].forEach(p=>{
            const div=document.createElement('div'); div.className='inv-item';
            const w=(p.weight!==undefined&&p.weight!==null)?(Number(p.weight).toFixed(2)+'kg'):'';
            div.textContent=`${p.name} (${p.rarityText})${w?' — '+w:''} — Value: ${Number(getPetTradeValue(p)).toFixed(2)}`;
            const already=used.includes(p.instanceId);
            if(already){div.classList.add('disabled-item'); const note=document.createElement('div');note.className='small muted';note.textContent='Already in trade';div.appendChild(note)}else{div.style.cursor='pointer';div.addEventListener('click',()=>{slots[idx]=p;closeModal();drawTradeArea()})}
            groupList.appendChild(div);
          });
          listWrap.appendChild(groupList);
        });
        container.appendChild(listWrap);
        openModal('Choose a pet to add',[container]);
      }
    });gridEl.appendChild(d)})
  }
  drawGrid(grid1,trade.slots1,a1,isRandom1);drawGrid(grid2,trade.slots2,a2,isRandom2);R.appendChild(btn('Finalize Trade','primary',()=>finalizeTrade()))}

function openPickModalForRandomSlot(slots,slotIdx){
  // similar to list mode but selecting a pet here will add it to the trade (choose variant after)
  const cont=document.createElement('div');
  cont.innerHTML=`<h4>Pick a pet to add to trade slot</h4>`;
  if(!eggs.length){cont.appendChild(document.createElement('div')).innerHTML='<div class="muted">No eggs/pets available</div>';openModal('Pick pet',[cont]);return}
  eggs.forEach(egg=>{
    const box=document.createElement('div');box.style.border='1px solid #eee';box.style.padding='8px';box.style.margin='6px 0';
    const title=document.createElement('div');title.innerHTML=`<strong>${esc(egg.name)}</strong><div class="small muted">Price: ${formatPrice(egg)} — Pets: ${egg.pets.length}</div>`;
    box.appendChild(title);
    if(!egg.pets||!egg.pets.length){const em=document.createElement('div');em.className='muted';em.textContent='No pets';box.appendChild(em);} else {
      egg.pets.forEach(p=>{
        const row=document.createElement('div');row.className='inv-item';row.style.cursor='pointer';row.style.display='flex';row.style.justifyContent='space-between';row.style.alignItems='center';
        row.innerHTML = `<div style="flex:1"><strong>${esc(p.name)}</strong><div class="small muted">${esc(p.rarityText)} • Money/tap: ${p.moneyPerTap}</div></div><div class="small">Values: ${Number(p.valueRegular||0)}/${Number(p.valueGold||0)}/${Number(p.valueRainbow||0)}</div>`;
        row.addEventListener('click',()=>{
          // ask variant selection
          const vsel=document.createElement('select'); vsel.innerHTML = '<option value="regular">Regular</option><option value="gold">Gold</option><option value="rainbow">Rainbow</option>';
          const ctn=document.createElement('div'); ctn.appendChild(Object.assign(document.createElement('label'),{textContent:'Choose variant'})); ctn.appendChild(vsel); ctn.appendChild(document.createElement('br'));
          ctn.appendChild(btn('Add to trade','primary',()=>{
            const variant = vsel.value==='regular'?null:(vsel.value==='gold'?'gold':'rainbow');
            const inst = makeRandomInstanceFromPoolItem({base:p,variant:variant});
            slots[slotIdx]=inst; closeModal(); drawTradeArea();
          }));
          ctn.appendChild(btn('Cancel','',()=>{}));
          openModal('Choose variant',[ctn]);
        });
        box.appendChild(row);
      })
    }
    cont.appendChild(box);
  });
  openModal('Pick a pet',[cont]);
}

function computeSlotsValue(slots){return slots.filter(Boolean).reduce((s,p)=>s+Number(getPetTradeValue(p)||0),0)}

function finalizeTrade(){
  const a1IsRandom = trade.acc1==='__random';
  const a2IsRandom = trade.acc2==='__random';
  const a1 = a1IsRandom?null:accounts.find(x=>x.id===trade.acc1);
  const a2 = a2IsRandom?null:accounts.find(x=>x.id===trade.acc2);
  if(!a1 && !a2) return alert('Accounts missing');
  // p1 = items from side1, p2 = items from side2
  const p1 = trade.slots1.filter(Boolean);
  const p2 = trade.slots2.filter(Boolean);

  // If neither side is random, keep existing behavior
  if(!a1IsRandom && !a2IsRandom){
    p1.forEach(p=>{a1.inventory=a1.inventory.filter(x=>x.instanceId!==p.instanceId);a2.inventory.push(p)});
    p2.forEach(p=>{a2.inventory=a2.inventory.filter(x=>x.instanceId!==p.instanceId);a1.inventory.push(p)});
    save(S_ACCTS,accounts);alert('Trade complete!');trade={acc1:null,acc2:null,slots1:Array(9).fill(null),slots2:Array(9).fill(null)};render();return;
  }

  // If one side is random:
  // - Pets given by a real account to random are removed (deleted) since random has no inventory
  // - Pets given by random to a real account are created as new instances and added to that account

  // a1 real gives to a2 (random)
  if(!a1IsRandom && a2IsRandom){
    // remove p1 from a1 inventory
    p1.forEach(p=>{a1.inventory=a1.inventory.filter(x=>x.instanceId!==p.instanceId)});
    // create new instances for each random pet and add to a1
    p2.forEach(rp=>{
      const newInst = Object.assign({}, rp);
      // ensure new instanceId and remove random marker
      newInst.instanceId = uid('inst');
      delete newInst.__randomSource;
      a1.inventory.push(newInst);
    });
    save(S_ACCTS,accounts);alert('Trade with Random complete!');trade={acc1:null,acc2:null,slots1:Array(9).fill(null),slots2:Array(9).fill(null)};render();return;
  }

  // a2 real gives to a1 (random)
  if(a1IsRandom && !a2IsRandom){
    // remove p2 from a2 inventory
    p2.forEach(p=>{a2.inventory=a2.inventory.filter(x=>x.instanceId!==p.instanceId)});
    // create new instances for each random pet and add to a2
    p1.forEach(rp=>{
      const newInst = Object.assign({}, rp);
      newInst.instanceId = uid('inst');
      delete newInst.__randomSource;
      a2.inventory.push(newInst);
    });
    save(S_ACCTS,accounts);alert('Trade with Random complete!');trade={acc1:null,acc2:null,slots1:Array(9).fill(null),slots2:Array(9).fill(null)};render();return;
  }
}

// ---------- New: LIST mode implementation ----------
function renderListMode(){L.innerHTML='';R.innerHTML='';L.appendChild(Object.assign(document.createElement('h3'),{textContent:'List Mode'}));
  const list=document.createElement('div');
  if(!eggs.length) list.innerHTML='<div class="muted">No eggs created yet.</div>';
  eggs.forEach(egg=>{
    const el=document.createElement('div');el.className='egg-item row';el.style.justifyContent='space-between';el.style.cursor='pointer';
    el.innerHTML=`<div style="flex:1"><strong>${esc(egg.name)}</strong><div class="small muted">Price: ${formatPrice(egg)} — Pets: ${egg.pets.length}</div></div>`;
    el.addEventListener('click',()=>{showEggListModal(egg)});
    list.appendChild(el);
  });
  L.appendChild(list);
  R.innerHTML='<div class="muted">Select an egg on the left to view its pets.</div>';
}

function showEggListModal(egg){
  const cont=document.createElement('div');
  cont.innerHTML=`<h3>${esc(egg.name)}</h3><div class="small muted">Price: ${formatPrice(egg)} — Pets: ${egg.pets.length}</div>`;
  if(!egg.pets||!egg.pets.length){cont.appendChild(document.createElement('div')).innerHTML='<div class="muted">No pets in this egg</div>';openModal('Egg: '+egg.name,[cont]);return}
  egg.pets.forEach(p=>{
    const box=document.createElement('div');box.style.border='1px solid #eee';box.style.padding='8px';box.style.margin='6px 0';
    const title=document.createElement('div');title.innerHTML=`<strong>${esc(p.name)}</strong> <span class="small">(${esc(p.rarityText)} — ${p.rarityPct||0}%)</span>`;
    const info=document.createElement('div');info.className='small muted';info.innerHTML=`Weight: ${p.weightMin}kg - ${p.weightMax}kg • Money/tap: ${p.moneyPerTap} • Gold%: ${p.goldPct||0} • Rainbow%: ${p.rainbowPct||0}`;
    const vals=document.createElement('div');vals.className='small';vals.textContent=`Values: Regular ${Number(p.valueRegular||0)} / Gold ${Number(p.valueGold||0)} / Rainbow ${Number(p.valueRainbow||0)}`;
    const row=document.createElement('div');row.className='row';row.style.marginTop='6px';
    row.appendChild(btn('Give','primary',()=>{openGivePetModal(p,egg)}));
    row.appendChild(btn('Details','',()=>{const d=document.createElement('div');d.innerHTML=`<h4>${esc(p.name)}</h4><div class="small muted">Rarity: ${p.rarityText} — ${p.rarityPct||0}%</div><div class="small muted">Weight: ${p.weightMin}kg - ${p.weightMax}kg</div><div class="small muted">Money/tap: ${p.moneyPerTap}</div><div class="small muted">Gold chance: ${p.goldPct||0}% — Value: ${Number(p.valueGold||0)}</div><div class="small muted">Rainbow chance: ${p.rainbowPct||0}% — Value: ${Number(p.valueRainbow||0)}</div><div class="small muted">Regular value: ${Number(p.valueRegular||0)}</div><div style="margin-top:6px">${esc(p.description||'')}</div>`;openModal('Pet details',[d])}));

    box.appendChild(title);box.appendChild(info);box.appendChild(vals);box.appendChild(row);
    cont.appendChild(box);
  });
  openModal('Egg: '+egg.name,[cont]);
}

function openGivePetModal(p,egg){
  const cont=document.createElement('div');
  cont.innerHTML=`<h4>Give: ${esc(p.name)}</h4>`;
  const varSelect=document.createElement('select');varSelect.innerHTML=`<option value="regular">Regular</option><option value="gold">Gold</option><option value="rainbow">Rainbow</option>`;
  cont.appendChild(Object.assign(document.createElement('label'),{textContent:'Variant to give'}));cont.appendChild(varSelect);
  cont.appendChild(document.createElement('br'));
  const accSelect=document.createElement('select');accSelect.innerHTML='<option value="">-- Select account --</option>'+accounts.map(a=>`<option value="${a.id}">${esc(a.name)}</option>`).join('');cont.appendChild(Object.assign(document.createElement('label'),{textContent:'Choose account'}));cont.appendChild(accSelect);
  cont.appendChild(document.createElement('br'));
  cont.appendChild(btn('Give pet','primary',()=>{
    const accId=accSelect.value; if(!accId) return alert('Pick an account');
    const acc=accounts.find(x=>x.id===accId); if(!acc) return alert('Account not found');
    const variant = varSelect.value==='regular'?null:(varSelect.value==='gold'?'gold':'rainbow');
    givePetToAccount(p,variant,acc);
    save(S_ACCTS,accounts);
    closeModal();
    render();
    alert(`Gave ${p.name} (${variant||'regular'}) to ${acc.name}`);
  }));
  cont.appendChild(btn('Cancel','',()=>closeModal()));
  openModal('Give pet',[cont]);
}

function givePetToAccount(basePet,variant,account){
  const weight = +((basePet.weightMin) + Math.random()*(Math.max(0,basePet.weightMax-basePet.weightMin))).toFixed(2);
  const instanceName = basePet.name + (variant?(' ('+variant+')'):'');
  const variantMultiplier = variant==='gold'?2:(variant==='rainbow'?5:1);
  const inst = {instanceId:uid('inst'),basePetId:basePet.id,name:instanceName,baseName:basePet.name,variant:variant,variantMultiplier:variantMultiplier,rarityText:basePet.rarityText,rarityPct:basePet.rarityPct,description:basePet.description,weight:weight,weightMin:basePet.weightMin,weightMax:basePet.weightMax,moneyPerTap:basePet.moneyPerTap,valueRegular:Number(basePet.valueRegular||0),valueGold:Number(basePet.valueGold||0),valueRainbow:Number(basePet.valueRainbow||0),createdAt:Date.now()};
  account.inventory.push(inst);
}

// ---------- end LIST mode implementation ----------

bCreate.addEventListener('click',()=>{mode='create';render()});bPlay.addEventListener('click',()=>{mode='play';render()});bTrade.addEventListener('click',()=>{mode='trade';render()});bList.addEventListener('click',()=>{mode='list';render()});
bExport.addEventListener('click',exportData);bImport.addEventListener('click',openImportModal);
render();
</script>
</body>
</html>
